/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Yondeco
 * OpenAPI spec version: 1.0.0-oas3.0.3
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { UserResponse } from "../models";

export const getGetMeResponseMock = (
	overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
	user: {
		ulid: faker.string.alpha({ length: { min: 26, max: 26 } }),
		uid: faker.string.alpha({ length: { min: 1, max: 20 } }),
		display_name: faker.string.alpha({ length: { min: 1, max: 100 } }),
		deleted_at: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				null,
			]),
			undefined,
		]),
		created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
		updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
	},
	...overrideResponse,
});

export const getUpdateMeResponseMock = (
	overrideResponse: Partial<UserResponse> = {},
): UserResponse => ({
	user: {
		ulid: faker.string.alpha({ length: { min: 26, max: 26 } }),
		uid: faker.string.alpha({ length: { min: 1, max: 20 } }),
		display_name: faker.string.alpha({ length: { min: 1, max: 100 } }),
		deleted_at: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				`${faker.date.past().toISOString().split(".")[0]}Z`,
				null,
			]),
			undefined,
		]),
		created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
		updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
	},
	...overrideResponse,
});

export const getGetMeMockHandler = (
	overrideResponse?:
		| UserResponse
		| ((
				info: Parameters<Parameters<typeof http.get>[1]>[0],
		  ) => Promise<UserResponse> | UserResponse),
) => {
	return http.get("*/users/me", async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === "function"
						? await overrideResponse(info)
						: overrideResponse
					: getGetMeResponseMock(),
			),
			{ status: 200, headers: { "Content-Type": "application/json" } },
		);
	});
};

export const getUpdateMeMockHandler = (
	overrideResponse?:
		| UserResponse
		| ((
				info: Parameters<Parameters<typeof http.put>[1]>[0],
		  ) => Promise<UserResponse> | UserResponse),
) => {
	return http.put("*/users/me", async (info) => {
		await delay(1000);

		return new HttpResponse(
			JSON.stringify(
				overrideResponse !== undefined
					? typeof overrideResponse === "function"
						? await overrideResponse(info)
						: overrideResponse
					: getUpdateMeResponseMock(),
			),
			{ status: 200, headers: { "Content-Type": "application/json" } },
		);
	});
};

export const getDeleteMeMockHandler = (
	overrideResponse?:
		| void
		| ((
				info: Parameters<Parameters<typeof http.delete>[1]>[0],
		  ) => Promise<void> | void),
) => {
	return http.delete("*/users/me", async (info) => {
		await delay(1000);
		if (typeof overrideResponse === "function") {
			await overrideResponse(info);
		}
		return new HttpResponse(null, { status: 204 });
	});
};
export const getYondecoMock = () => [
	getGetMeMockHandler(),
	getUpdateMeMockHandler(),
	getDeleteMeMockHandler(),
];
