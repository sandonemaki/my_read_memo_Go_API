/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Yondeco
 * OpenAPI spec version: 1.0.0-oas3.0.3
 */
import axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import type {
	BadRequestResponse,
	InternalServerErrorResponse,
	NotFoundResponse,
	UnauthorizedResponse,
	UpdateUser,
	UserResponse,
} from "../models";

/**
 * 認証されたユーザーの詳細情報を取得します
 * @summary 現在のユーザー情報を取得
 */
export const getMe = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserResponse>> => {
	return axios.get(`/users/me`, options);
};

export const getGetMeKey = () => [`/users/me`] as const;

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = AxiosError<
	UnauthorizedResponse | InternalServerErrorResponse
>;

/**
 * @summary 現在のユーザー情報を取得
 */
export const useGetMe = <
	TError = AxiosError<UnauthorizedResponse | InternalServerErrorResponse>,
>(options?: {
	swr?: SWRConfiguration<Awaited<ReturnType<typeof getMe>>, TError> & {
		swrKey?: Key;
		enabled?: boolean;
	};
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const isEnabled = swrOptions?.enabled !== false;
	const swrKey =
		swrOptions?.swrKey ?? (() => (isEnabled ? getGetMeKey() : null));
	const swrFn = () => getMe(axiosOptions);

	const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
		swrKey,
		swrFn,
		swrOptions,
	);

	return {
		swrKey,
		...query,
	};
};

/**
 * 認証されたユーザーの情報を更新します
 * @summary 現在のユーザー情報を更新
 */
export const updateMe = (
	updateUser: UpdateUser,
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<UserResponse>> => {
	return axios.put(`/users/me`, updateUser, options);
};

export const getUpdateMeMutationFetcher = (options?: AxiosRequestConfig) => {
	return (
		_: Key,
		{ arg }: { arg: UpdateUser },
	): Promise<AxiosResponse<UserResponse>> => {
		return updateMe(arg, options);
	};
};
export const getUpdateMeMutationKey = () => [`/users/me`] as const;

export type UpdateMeMutationResult = NonNullable<
	Awaited<ReturnType<typeof updateMe>>
>;
export type UpdateMeMutationError = AxiosError<
	| BadRequestResponse
	| UnauthorizedResponse
	| NotFoundResponse
	| InternalServerErrorResponse
>;

/**
 * @summary 現在のユーザー情報を更新
 */
export const useUpdateMe = <
	TError = AxiosError<
		| BadRequestResponse
		| UnauthorizedResponse
		| NotFoundResponse
		| InternalServerErrorResponse
	>,
>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof updateMe>>,
		TError,
		Key,
		UpdateUser,
		Awaited<ReturnType<typeof updateMe>>
	> & { swrKey?: string };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getUpdateMeMutationKey();
	const swrFn = getUpdateMeMutationFetcher(axiosOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};

/**
 * 認証されたユーザーのアカウントを削除します（論理削除）
 * @summary 現在のユーザーアカウントを削除
 */
export const deleteMe = (
	options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
	return axios.delete(`/users/me`, options);
};

export const getDeleteMeMutationFetcher = (options?: AxiosRequestConfig) => {
	return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<void>> => {
		return deleteMe(options);
	};
};
export const getDeleteMeMutationKey = () => [`/users/me`] as const;

export type DeleteMeMutationResult = NonNullable<
	Awaited<ReturnType<typeof deleteMe>>
>;
export type DeleteMeMutationError = AxiosError<
	UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse
>;

/**
 * @summary 現在のユーザーアカウントを削除
 */
export const useDeleteMe = <
	TError = AxiosError<
		UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse
	>,
>(options?: {
	swr?: SWRMutationConfiguration<
		Awaited<ReturnType<typeof deleteMe>>,
		TError,
		Key,
		Arguments,
		Awaited<ReturnType<typeof deleteMe>>
	> & { swrKey?: string };
	axios?: AxiosRequestConfig;
}) => {
	const { swr: swrOptions, axios: axiosOptions } = options ?? {};

	const swrKey = swrOptions?.swrKey ?? getDeleteMeMutationKey();
	const swrFn = getDeleteMeMutationFetcher(axiosOptions);

	const query = useSWRMutation(swrKey, swrFn, swrOptions);

	return {
		swrKey,
		...query,
	};
};
