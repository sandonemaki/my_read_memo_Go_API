// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// ReadingHistory is an object representing the database table.
type ReadingHistory struct {
	ID         int64     `db:"id,pk" `
	UserUlid   string    `db:"user_ulid" `
	ContentURL string    `db:"content_url" `
	RecordedAt time.Time `db:"recorded_at" `
	CreatedAt  time.Time `db:"created_at" `

	R readingHistoryR `db:"-" `
}

// ReadingHistorySlice is an alias for a slice of pointers to ReadingHistory.
// This should almost always be used instead of []*ReadingHistory.
type ReadingHistorySlice []*ReadingHistory

// ReadingHistories contains methods to work with the reading_history table
var ReadingHistories = psql.NewTablex[*ReadingHistory, ReadingHistorySlice, *ReadingHistorySetter]("", "reading_history")

// ReadingHistoriesQuery is a query on the reading_history table
type ReadingHistoriesQuery = *psql.ViewQuery[*ReadingHistory, ReadingHistorySlice]

// readingHistoryR is where relationships are stored.
type readingHistoryR struct {
	UserUlidUser *User // reading_history.reading_history_user_ulid_fkey
}

type readingHistoryColumnNames struct {
	ID         string
	UserUlid   string
	ContentURL string
	RecordedAt string
	CreatedAt  string
}

var ReadingHistoryColumns = buildReadingHistoryColumns("reading_history")

type readingHistoryColumns struct {
	tableAlias string
	ID         psql.Expression
	UserUlid   psql.Expression
	ContentURL psql.Expression
	RecordedAt psql.Expression
	CreatedAt  psql.Expression
}

func (c readingHistoryColumns) Alias() string {
	return c.tableAlias
}

func (readingHistoryColumns) AliasedAs(alias string) readingHistoryColumns {
	return buildReadingHistoryColumns(alias)
}

func buildReadingHistoryColumns(alias string) readingHistoryColumns {
	return readingHistoryColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		UserUlid:   psql.Quote(alias, "user_ulid"),
		ContentURL: psql.Quote(alias, "content_url"),
		RecordedAt: psql.Quote(alias, "recorded_at"),
		CreatedAt:  psql.Quote(alias, "created_at"),
	}
}

type readingHistoryWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, int64]
	UserUlid   psql.WhereMod[Q, string]
	ContentURL psql.WhereMod[Q, string]
	RecordedAt psql.WhereMod[Q, time.Time]
	CreatedAt  psql.WhereMod[Q, time.Time]
}

func (readingHistoryWhere[Q]) AliasedAs(alias string) readingHistoryWhere[Q] {
	return buildReadingHistoryWhere[Q](buildReadingHistoryColumns(alias))
}

func buildReadingHistoryWhere[Q psql.Filterable](cols readingHistoryColumns) readingHistoryWhere[Q] {
	return readingHistoryWhere[Q]{
		ID:         psql.Where[Q, int64](cols.ID),
		UserUlid:   psql.Where[Q, string](cols.UserUlid),
		ContentURL: psql.Where[Q, string](cols.ContentURL),
		RecordedAt: psql.Where[Q, time.Time](cols.RecordedAt),
		CreatedAt:  psql.Where[Q, time.Time](cols.CreatedAt),
	}
}

var ReadingHistoryErrors = &readingHistoryErrors{
	ErrUniqueReadingHistoryPkey: &UniqueConstraintError{
		schema:  "",
		table:   "reading_history",
		columns: []string{"id"},
		s:       "reading_history_pkey",
	},
}

type readingHistoryErrors struct {
	ErrUniqueReadingHistoryPkey *UniqueConstraintError
}

// ReadingHistorySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ReadingHistorySetter struct {
	ID         *int64     `db:"id,pk" `
	UserUlid   *string    `db:"user_ulid" `
	ContentURL *string    `db:"content_url" `
	RecordedAt *time.Time `db:"recorded_at" `
	CreatedAt  *time.Time `db:"created_at" `
}

func (s ReadingHistorySetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.UserUlid != nil {
		vals = append(vals, "user_ulid")
	}

	if s.ContentURL != nil {
		vals = append(vals, "content_url")
	}

	if s.RecordedAt != nil {
		vals = append(vals, "recorded_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s ReadingHistorySetter) Overwrite(t *ReadingHistory) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.UserUlid != nil {
		t.UserUlid = *s.UserUlid
	}
	if s.ContentURL != nil {
		t.ContentURL = *s.ContentURL
	}
	if s.RecordedAt != nil {
		t.RecordedAt = *s.RecordedAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *ReadingHistorySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return ReadingHistories.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.UserUlid != nil {
			vals[1] = psql.Arg(*s.UserUlid)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.ContentURL != nil {
			vals[2] = psql.Arg(*s.ContentURL)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.RecordedAt != nil {
			vals[3] = psql.Arg(*s.RecordedAt)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ReadingHistorySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ReadingHistorySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.UserUlid != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_ulid")...),
			psql.Arg(s.UserUlid),
		}})
	}

	if s.ContentURL != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content_url")...),
			psql.Arg(s.ContentURL),
		}})
	}

	if s.RecordedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "recorded_at")...),
			psql.Arg(s.RecordedAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindReadingHistory retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindReadingHistory(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*ReadingHistory, error) {
	if len(cols) == 0 {
		return ReadingHistories.Query(
			SelectWhere.ReadingHistories.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return ReadingHistories.Query(
		SelectWhere.ReadingHistories.ID.EQ(IDPK),
		sm.Columns(ReadingHistories.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ReadingHistoryExists checks the presence of a single record by primary key
func ReadingHistoryExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return ReadingHistories.Query(
		SelectWhere.ReadingHistories.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after ReadingHistory is retrieved from the database
func (o *ReadingHistory) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ReadingHistories.AfterSelectHooks.RunHooks(ctx, exec, ReadingHistorySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = ReadingHistories.AfterInsertHooks.RunHooks(ctx, exec, ReadingHistorySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = ReadingHistories.AfterUpdateHooks.RunHooks(ctx, exec, ReadingHistorySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = ReadingHistories.AfterDeleteHooks.RunHooks(ctx, exec, ReadingHistorySlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the ReadingHistory
func (o *ReadingHistory) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *ReadingHistory) pkEQ() dialect.Expression {
	return psql.Quote("reading_history", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the ReadingHistory
func (o *ReadingHistory) Update(ctx context.Context, exec bob.Executor, s *ReadingHistorySetter) error {
	v, err := ReadingHistories.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single ReadingHistory record with an executor
func (o *ReadingHistory) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := ReadingHistories.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the ReadingHistory using the executor
func (o *ReadingHistory) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := ReadingHistories.Query(
		SelectWhere.ReadingHistories.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ReadingHistorySlice is retrieved from the database
func (o ReadingHistorySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = ReadingHistories.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = ReadingHistories.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = ReadingHistories.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = ReadingHistories.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ReadingHistorySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("reading_history", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ReadingHistorySlice) copyMatchingRows(from ...*ReadingHistory) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ReadingHistorySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ReadingHistories.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ReadingHistory:
				o.copyMatchingRows(retrieved)
			case []*ReadingHistory:
				o.copyMatchingRows(retrieved...)
			case ReadingHistorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ReadingHistory or a slice of ReadingHistory
				// then run the AfterUpdateHooks on the slice
				_, err = ReadingHistories.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ReadingHistorySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return ReadingHistories.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *ReadingHistory:
				o.copyMatchingRows(retrieved)
			case []*ReadingHistory:
				o.copyMatchingRows(retrieved...)
			case ReadingHistorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a ReadingHistory or a slice of ReadingHistory
				// then run the AfterDeleteHooks on the slice
				_, err = ReadingHistories.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ReadingHistorySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ReadingHistorySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ReadingHistories.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ReadingHistorySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := ReadingHistories.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ReadingHistorySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := ReadingHistories.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type readingHistoryJoins[Q dialect.Joinable] struct {
	typ          string
	UserUlidUser modAs[Q, userColumns]
}

func (j readingHistoryJoins[Q]) aliasedAs(alias string) readingHistoryJoins[Q] {
	return buildReadingHistoryJoins[Q](buildReadingHistoryColumns(alias), j.typ)
}

func buildReadingHistoryJoins[Q dialect.Joinable](cols readingHistoryColumns, typ string) readingHistoryJoins[Q] {
	return readingHistoryJoins[Q]{
		typ: typ,
		UserUlidUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Ulid.EQ(cols.UserUlid),
					))
				}

				return mods
			},
		},
	}
}

// UserUlidUser starts a query for related objects on users
func (o *ReadingHistory) UserUlidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Ulid.EQ(psql.Arg(o.UserUlid))),
	)...)
}

func (os ReadingHistorySlice) UserUlidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkUserUlid[i] = o.UserUlid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserUlid), "text[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Ulid).OP("IN", PKArgExpr)),
	)...)
}

func (o *ReadingHistory) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "UserUlidUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("readingHistory cannot load %T as %q", retrieved, name)
		}

		o.R.UserUlidUser = rel

		if rel != nil {
			rel.R.UserUlidReadingHistories = ReadingHistorySlice{o}
		}
		return nil
	default:
		return fmt.Errorf("readingHistory has no relationship %q", name)
	}
}

type readingHistoryPreloader struct {
	UserUlidUser func(...psql.PreloadOption) psql.Preloader
}

func buildReadingHistoryPreloader() readingHistoryPreloader {
	return readingHistoryPreloader{
		UserUlidUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "UserUlidUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.ReadingHistories,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.ReadingHistories.UserUlid,
						},
						ToColumns: []string{
							ColumnNames.Users.Ulid,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type readingHistoryThenLoader[Q orm.Loadable] struct {
	UserUlidUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildReadingHistoryThenLoader[Q orm.Loadable]() readingHistoryThenLoader[Q] {
	type UserUlidUserLoadInterface interface {
		LoadUserUlidUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return readingHistoryThenLoader[Q]{
		UserUlidUser: thenLoadBuilder[Q](
			"UserUlidUser",
			func(ctx context.Context, exec bob.Executor, retrieved UserUlidUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUserUlidUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadUserUlidUser loads the readingHistory's UserUlidUser into the .R struct
func (o *ReadingHistory) LoadUserUlidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserUlidUser = nil

	related, err := o.UserUlidUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserUlidReadingHistories = ReadingHistorySlice{o}

	o.R.UserUlidUser = related
	return nil
}

// LoadUserUlidUser loads the readingHistory's UserUlidUser into the .R struct
func (os ReadingHistorySlice) LoadUserUlidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UserUlidUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserUlid != rel.Ulid {
				continue
			}

			rel.R.UserUlidReadingHistories = append(rel.R.UserUlidReadingHistories, o)

			o.R.UserUlidUser = rel
			break
		}
	}

	return nil
}

func attachReadingHistoryUserUlidUser0(ctx context.Context, exec bob.Executor, count int, readingHistory0 *ReadingHistory, user1 *User) (*ReadingHistory, error) {
	setter := &ReadingHistorySetter{
		UserUlid: &user1.Ulid,
	}

	err := readingHistory0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachReadingHistoryUserUlidUser0: %w", err)
	}

	return readingHistory0, nil
}

func (readingHistory0 *ReadingHistory) InsertUserUlidUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachReadingHistoryUserUlidUser0(ctx, exec, 1, readingHistory0, user1)
	if err != nil {
		return err
	}

	readingHistory0.R.UserUlidUser = user1

	user1.R.UserUlidReadingHistories = append(user1.R.UserUlidReadingHistories, readingHistory0)

	return nil
}

func (readingHistory0 *ReadingHistory) AttachUserUlidUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachReadingHistoryUserUlidUser0(ctx, exec, 1, readingHistory0, user1)
	if err != nil {
		return err
	}

	readingHistory0.R.UserUlidUser = user1

	user1.R.UserUlidReadingHistories = append(user1.R.UserUlidReadingHistories, readingHistory0)

	return nil
}
