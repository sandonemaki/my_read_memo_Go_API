// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Author is an object representing the database table.
type Author struct {
	ID        int64     `db:"id,pk" `
	Name      string    `db:"name" `
	CreatedAt time.Time `db:"created_at" `
	UpdatedAt time.Time `db:"updated_at" `

	R authorR `db:"-" `
}

// AuthorSlice is an alias for a slice of pointers to Author.
// This should almost always be used instead of []*Author.
type AuthorSlice []*Author

// Authors contains methods to work with the authors table
var Authors = psql.NewTablex[*Author, AuthorSlice, *AuthorSetter]("", "authors")

// AuthorsQuery is a query on the authors table
type AuthorsQuery = *psql.ViewQuery[*Author, AuthorSlice]

// authorR is where relationships are stored.
type authorR struct {
	MasterBooks MasterBookSlice // master_books.master_books_author_id_fkey
}

type authorColumnNames struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}

var AuthorColumns = buildAuthorColumns("authors")

type authorColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c authorColumns) Alias() string {
	return c.tableAlias
}

func (authorColumns) AliasedAs(alias string) authorColumns {
	return buildAuthorColumns(alias)
}

func buildAuthorColumns(alias string) authorColumns {
	return authorColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type authorWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int64]
	Name      psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (authorWhere[Q]) AliasedAs(alias string) authorWhere[Q] {
	return buildAuthorWhere[Q](buildAuthorColumns(alias))
}

func buildAuthorWhere[Q psql.Filterable](cols authorColumns) authorWhere[Q] {
	return authorWhere[Q]{
		ID:        psql.Where[Q, int64](cols.ID),
		Name:      psql.Where[Q, string](cols.Name),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var AuthorErrors = &authorErrors{
	ErrUniqueAuthorsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "authors",
		columns: []string{"id"},
		s:       "authors_pkey",
	},
}

type authorErrors struct {
	ErrUniqueAuthorsPkey *UniqueConstraintError
}

// AuthorSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AuthorSetter struct {
	ID        *int64     `db:"id,pk" `
	Name      *string    `db:"name" `
	CreatedAt *time.Time `db:"created_at" `
	UpdatedAt *time.Time `db:"updated_at" `
}

func (s AuthorSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.Name != nil {
		vals = append(vals, "name")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AuthorSetter) Overwrite(t *Author) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.Name != nil {
		t.Name = *s.Name
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *AuthorSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Authors.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name != nil {
			vals[1] = psql.Arg(*s.Name)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[2] = psql.Arg(*s.CreatedAt)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[3] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s AuthorSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s AuthorSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindAuthor retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAuthor(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Author, error) {
	if len(cols) == 0 {
		return Authors.Query(
			SelectWhere.Authors.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Authors.Query(
		SelectWhere.Authors.ID.EQ(IDPK),
		sm.Columns(Authors.Columns().Only(cols...)),
	).One(ctx, exec)
}

// AuthorExists checks the presence of a single record by primary key
func AuthorExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Authors.Query(
		SelectWhere.Authors.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Author is retrieved from the database
func (o *Author) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Authors.AfterSelectHooks.RunHooks(ctx, exec, AuthorSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Authors.AfterInsertHooks.RunHooks(ctx, exec, AuthorSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Authors.AfterUpdateHooks.RunHooks(ctx, exec, AuthorSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Authors.AfterDeleteHooks.RunHooks(ctx, exec, AuthorSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Author
func (o *Author) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Author) pkEQ() dialect.Expression {
	return psql.Quote("authors", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Author
func (o *Author) Update(ctx context.Context, exec bob.Executor, s *AuthorSetter) error {
	v, err := Authors.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Author record with an executor
func (o *Author) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Authors.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Author using the executor
func (o *Author) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Authors.Query(
		SelectWhere.Authors.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after AuthorSlice is retrieved from the database
func (o AuthorSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Authors.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Authors.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Authors.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Authors.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o AuthorSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("authors", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o AuthorSlice) copyMatchingRows(from ...*Author) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o AuthorSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Authors.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Author:
				o.copyMatchingRows(retrieved)
			case []*Author:
				o.copyMatchingRows(retrieved...)
			case AuthorSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Author or a slice of Author
				// then run the AfterUpdateHooks on the slice
				_, err = Authors.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o AuthorSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Authors.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Author:
				o.copyMatchingRows(retrieved)
			case []*Author:
				o.copyMatchingRows(retrieved...)
			case AuthorSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Author or a slice of Author
				// then run the AfterDeleteHooks on the slice
				_, err = Authors.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o AuthorSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AuthorSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Authors.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o AuthorSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Authors.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o AuthorSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Authors.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type authorJoins[Q dialect.Joinable] struct {
	typ         string
	MasterBooks modAs[Q, masterBookColumns]
}

func (j authorJoins[Q]) aliasedAs(alias string) authorJoins[Q] {
	return buildAuthorJoins[Q](buildAuthorColumns(alias), j.typ)
}

func buildAuthorJoins[Q dialect.Joinable](cols authorColumns, typ string) authorJoins[Q] {
	return authorJoins[Q]{
		typ: typ,
		MasterBooks: modAs[Q, masterBookColumns]{
			c: MasterBookColumns,
			f: func(to masterBookColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, MasterBooks.Name().As(to.Alias())).On(
						to.AuthorID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}

// MasterBooks starts a query for related objects on master_books
func (o *Author) MasterBooks(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	return MasterBooks.Query(append(mods,
		sm.Where(MasterBookColumns.AuthorID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os AuthorSlice) MasterBooks(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	pkID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bigint[]")),
	))

	return MasterBooks.Query(append(mods,
		sm.Where(psql.Group(MasterBookColumns.AuthorID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Author) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "MasterBooks":
		rels, ok := retrieved.(MasterBookSlice)
		if !ok {
			return fmt.Errorf("author cannot load %T as %q", retrieved, name)
		}

		o.R.MasterBooks = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Author = o
			}
		}
		return nil
	default:
		return fmt.Errorf("author has no relationship %q", name)
	}
}

type authorPreloader struct{}

func buildAuthorPreloader() authorPreloader {
	return authorPreloader{}
}

type authorThenLoader[Q orm.Loadable] struct {
	MasterBooks func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildAuthorThenLoader[Q orm.Loadable]() authorThenLoader[Q] {
	type MasterBooksLoadInterface interface {
		LoadMasterBooks(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return authorThenLoader[Q]{
		MasterBooks: thenLoadBuilder[Q](
			"MasterBooks",
			func(ctx context.Context, exec bob.Executor, retrieved MasterBooksLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadMasterBooks(ctx, exec, mods...)
			},
		),
	}
}

// LoadMasterBooks loads the author's MasterBooks into the .R struct
func (o *Author) LoadMasterBooks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.MasterBooks = nil

	related, err := o.MasterBooks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Author = o
	}

	o.R.MasterBooks = related
	return nil
}

// LoadMasterBooks loads the author's MasterBooks into the .R struct
func (os AuthorSlice) LoadMasterBooks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	masterBooks, err := os.MasterBooks(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.MasterBooks = nil
	}

	for _, o := range os {
		for _, rel := range masterBooks {
			if o.ID != rel.AuthorID {
				continue
			}

			rel.R.Author = o

			o.R.MasterBooks = append(o.R.MasterBooks, rel)
		}
	}

	return nil
}

func insertAuthorMasterBooks0(ctx context.Context, exec bob.Executor, masterBooks1 []*MasterBookSetter, author0 *Author) (MasterBookSlice, error) {
	for i := range masterBooks1 {
		masterBooks1[i].AuthorID = &author0.ID
	}

	ret, err := MasterBooks.Insert(bob.ToMods(masterBooks1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertAuthorMasterBooks0: %w", err)
	}

	return ret, nil
}

func attachAuthorMasterBooks0(ctx context.Context, exec bob.Executor, count int, masterBooks1 MasterBookSlice, author0 *Author) (MasterBookSlice, error) {
	setter := &MasterBookSetter{
		AuthorID: &author0.ID,
	}

	err := masterBooks1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachAuthorMasterBooks0: %w", err)
	}

	return masterBooks1, nil
}

func (author0 *Author) InsertMasterBooks(ctx context.Context, exec bob.Executor, related ...*MasterBookSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	masterBooks1, err := insertAuthorMasterBooks0(ctx, exec, related, author0)
	if err != nil {
		return err
	}

	author0.R.MasterBooks = append(author0.R.MasterBooks, masterBooks1...)

	for _, rel := range masterBooks1 {
		rel.R.Author = author0
	}
	return nil
}

func (author0 *Author) AttachMasterBooks(ctx context.Context, exec bob.Executor, related ...*MasterBook) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	masterBooks1 := MasterBookSlice(related)

	_, err = attachAuthorMasterBooks0(ctx, exec, len(related), masterBooks1, author0)
	if err != nil {
		return err
	}

	author0.R.MasterBooks = append(author0.R.MasterBooks, masterBooks1...)

	for _, rel := range related {
		rel.R.Author = author0
	}

	return nil
}
