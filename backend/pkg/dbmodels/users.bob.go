// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// User is an object representing the database table.
type User struct {
	Ulid      string              `db:"ulid,pk" `
	Nickname  string              `db:"nickname" `
	DeletedAt sql.Null[time.Time] `db:"deleted_at" `
	CreatedAt time.Time           `db:"created_at" `
	UpdatedAt time.Time           `db:"updated_at" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	UserUlidReadingHistories ReadingHistorySlice // reading_history.reading_history_user_ulid_fkey
	UserUlidUserBookLogs     UserBookLogSlice    // user_book_logs.user_book_logs_user_ulid_fkey
}

type userColumnNames struct {
	Ulid      string
	Nickname  string
	DeletedAt string
	CreatedAt string
	UpdatedAt string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias string
	Ulid       psql.Expression
	Nickname   psql.Expression
	DeletedAt  psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias: alias,
		Ulid:       psql.Quote(alias, "ulid"),
		Nickname:   psql.Quote(alias, "nickname"),
		DeletedAt:  psql.Quote(alias, "deleted_at"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type userWhere[Q psql.Filterable] struct {
	Ulid      psql.WhereMod[Q, string]
	Nickname  psql.WhereMod[Q, string]
	DeletedAt psql.WhereNullMod[Q, time.Time]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		Ulid:      psql.Where[Q, string](cols.Ulid),
		Nickname:  psql.Where[Q, string](cols.Nickname),
		DeletedAt: psql.WhereNull[Q, time.Time](cols.DeletedAt),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var UserErrors = &userErrors{
	ErrUniqueUsersPkey: &UniqueConstraintError{
		schema:  "",
		table:   "users",
		columns: []string{"ulid"},
		s:       "users_pkey",
	},
}

type userErrors struct {
	ErrUniqueUsersPkey *UniqueConstraintError
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	Ulid      *string              `db:"ulid,pk" `
	Nickname  *string              `db:"nickname" `
	DeletedAt *sql.Null[time.Time] `db:"deleted_at" `
	CreatedAt *time.Time           `db:"created_at" `
	UpdatedAt *time.Time           `db:"updated_at" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.Ulid != nil {
		vals = append(vals, "ulid")
	}

	if s.Nickname != nil {
		vals = append(vals, "nickname")
	}

	if s.DeletedAt != nil {
		vals = append(vals, "deleted_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.Ulid != nil {
		t.Ulid = *s.Ulid
	}
	if s.Nickname != nil {
		t.Nickname = *s.Nickname
	}
	if s.DeletedAt != nil {
		t.DeletedAt = *s.DeletedAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.Ulid != nil {
			vals[0] = psql.Arg(*s.Ulid)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Nickname != nil {
			vals[1] = psql.Arg(*s.Nickname)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.DeletedAt != nil {
			vals[2] = psql.Arg(*s.DeletedAt)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[3] = psql.Arg(*s.CreatedAt)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[4] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.Ulid != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ulid")...),
			psql.Arg(s.Ulid),
		}})
	}

	if s.Nickname != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nickname")...),
			psql.Arg(s.Nickname),
		}})
	}

	if s.DeletedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deleted_at")...),
			psql.Arg(s.DeletedAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, UlidPK string, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.Ulid.EQ(UlidPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.Ulid.EQ(UlidPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, UlidPK string) (bool, error) {
	return Users.Query(
		SelectWhere.Users.Ulid.EQ(UlidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Ulid)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "ulid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.Ulid.EQ(o.Ulid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("users", "ulid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.Ulid != old.Ulid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ                      string
	UserUlidReadingHistories modAs[Q, readingHistoryColumns]
	UserUlidUserBookLogs     modAs[Q, userBookLogColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		UserUlidReadingHistories: modAs[Q, readingHistoryColumns]{
			c: ReadingHistoryColumns,
			f: func(to readingHistoryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, ReadingHistories.Name().As(to.Alias())).On(
						to.UserUlid.EQ(cols.Ulid),
					))
				}

				return mods
			},
		},
		UserUlidUserBookLogs: modAs[Q, userBookLogColumns]{
			c: UserBookLogColumns,
			f: func(to userBookLogColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, UserBookLogs.Name().As(to.Alias())).On(
						to.UserUlid.EQ(cols.Ulid),
					))
				}

				return mods
			},
		},
	}
}

// UserUlidReadingHistories starts a query for related objects on reading_history
func (o *User) UserUlidReadingHistories(mods ...bob.Mod[*dialect.SelectQuery]) ReadingHistoriesQuery {
	return ReadingHistories.Query(append(mods,
		sm.Where(ReadingHistoryColumns.UserUlid.EQ(psql.Arg(o.Ulid))),
	)...)
}

func (os UserSlice) UserUlidReadingHistories(mods ...bob.Mod[*dialect.SelectQuery]) ReadingHistoriesQuery {
	pkUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkUlid[i] = o.Ulid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUlid), "text[]")),
	))

	return ReadingHistories.Query(append(mods,
		sm.Where(psql.Group(ReadingHistoryColumns.UserUlid).OP("IN", PKArgExpr)),
	)...)
}

// UserUlidUserBookLogs starts a query for related objects on user_book_logs
func (o *User) UserUlidUserBookLogs(mods ...bob.Mod[*dialect.SelectQuery]) UserBookLogsQuery {
	return UserBookLogs.Query(append(mods,
		sm.Where(UserBookLogColumns.UserUlid.EQ(psql.Arg(o.Ulid))),
	)...)
}

func (os UserSlice) UserUlidUserBookLogs(mods ...bob.Mod[*dialect.SelectQuery]) UserBookLogsQuery {
	pkUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkUlid[i] = o.Ulid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUlid), "text[]")),
	))

	return UserBookLogs.Query(append(mods,
		sm.Where(psql.Group(UserBookLogColumns.UserUlid).OP("IN", PKArgExpr)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "UserUlidReadingHistories":
		rels, ok := retrieved.(ReadingHistorySlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UserUlidReadingHistories = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UserUlidUser = o
			}
		}
		return nil
	case "UserUlidUserBookLogs":
		rels, ok := retrieved.(UserBookLogSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.UserUlidUserBookLogs = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.UserUlidUser = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct{}

func buildUserPreloader() userPreloader {
	return userPreloader{}
}

type userThenLoader[Q orm.Loadable] struct {
	UserUlidReadingHistories func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	UserUlidUserBookLogs     func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type UserUlidReadingHistoriesLoadInterface interface {
		LoadUserUlidReadingHistories(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type UserUlidUserBookLogsLoadInterface interface {
		LoadUserUlidUserBookLogs(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		UserUlidReadingHistories: thenLoadBuilder[Q](
			"UserUlidReadingHistories",
			func(ctx context.Context, exec bob.Executor, retrieved UserUlidReadingHistoriesLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUserUlidReadingHistories(ctx, exec, mods...)
			},
		),
		UserUlidUserBookLogs: thenLoadBuilder[Q](
			"UserUlidUserBookLogs",
			func(ctx context.Context, exec bob.Executor, retrieved UserUlidUserBookLogsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUserUlidUserBookLogs(ctx, exec, mods...)
			},
		),
	}
}

// LoadUserUlidReadingHistories loads the user's UserUlidReadingHistories into the .R struct
func (o *User) LoadUserUlidReadingHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserUlidReadingHistories = nil

	related, err := o.UserUlidReadingHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UserUlidUser = o
	}

	o.R.UserUlidReadingHistories = related
	return nil
}

// LoadUserUlidReadingHistories loads the user's UserUlidReadingHistories into the .R struct
func (os UserSlice) LoadUserUlidReadingHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	readingHistories, err := os.UserUlidReadingHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UserUlidReadingHistories = nil
	}

	for _, o := range os {
		for _, rel := range readingHistories {
			if o.Ulid != rel.UserUlid {
				continue
			}

			rel.R.UserUlidUser = o

			o.R.UserUlidReadingHistories = append(o.R.UserUlidReadingHistories, rel)
		}
	}

	return nil
}

// LoadUserUlidUserBookLogs loads the user's UserUlidUserBookLogs into the .R struct
func (o *User) LoadUserUlidUserBookLogs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserUlidUserBookLogs = nil

	related, err := o.UserUlidUserBookLogs(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.UserUlidUser = o
	}

	o.R.UserUlidUserBookLogs = related
	return nil
}

// LoadUserUlidUserBookLogs loads the user's UserUlidUserBookLogs into the .R struct
func (os UserSlice) LoadUserUlidUserBookLogs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	userBookLogs, err := os.UserUlidUserBookLogs(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.UserUlidUserBookLogs = nil
	}

	for _, o := range os {
		for _, rel := range userBookLogs {
			if o.Ulid != rel.UserUlid {
				continue
			}

			rel.R.UserUlidUser = o

			o.R.UserUlidUserBookLogs = append(o.R.UserUlidUserBookLogs, rel)
		}
	}

	return nil
}

func insertUserUserUlidReadingHistories0(ctx context.Context, exec bob.Executor, readingHistories1 []*ReadingHistorySetter, user0 *User) (ReadingHistorySlice, error) {
	for i := range readingHistories1 {
		readingHistories1[i].UserUlid = &user0.Ulid
	}

	ret, err := ReadingHistories.Insert(bob.ToMods(readingHistories1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUserUlidReadingHistories0: %w", err)
	}

	return ret, nil
}

func attachUserUserUlidReadingHistories0(ctx context.Context, exec bob.Executor, count int, readingHistories1 ReadingHistorySlice, user0 *User) (ReadingHistorySlice, error) {
	setter := &ReadingHistorySetter{
		UserUlid: &user0.Ulid,
	}

	err := readingHistories1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUserUlidReadingHistories0: %w", err)
	}

	return readingHistories1, nil
}

func (user0 *User) InsertUserUlidReadingHistories(ctx context.Context, exec bob.Executor, related ...*ReadingHistorySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	readingHistories1, err := insertUserUserUlidReadingHistories0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UserUlidReadingHistories = append(user0.R.UserUlidReadingHistories, readingHistories1...)

	for _, rel := range readingHistories1 {
		rel.R.UserUlidUser = user0
	}
	return nil
}

func (user0 *User) AttachUserUlidReadingHistories(ctx context.Context, exec bob.Executor, related ...*ReadingHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	readingHistories1 := ReadingHistorySlice(related)

	_, err = attachUserUserUlidReadingHistories0(ctx, exec, len(related), readingHistories1, user0)
	if err != nil {
		return err
	}

	user0.R.UserUlidReadingHistories = append(user0.R.UserUlidReadingHistories, readingHistories1...)

	for _, rel := range related {
		rel.R.UserUlidUser = user0
	}

	return nil
}

func insertUserUserUlidUserBookLogs0(ctx context.Context, exec bob.Executor, userBookLogs1 []*UserBookLogSetter, user0 *User) (UserBookLogSlice, error) {
	for i := range userBookLogs1 {
		userBookLogs1[i].UserUlid = &user0.Ulid
	}

	ret, err := UserBookLogs.Insert(bob.ToMods(userBookLogs1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserUserUlidUserBookLogs0: %w", err)
	}

	return ret, nil
}

func attachUserUserUlidUserBookLogs0(ctx context.Context, exec bob.Executor, count int, userBookLogs1 UserBookLogSlice, user0 *User) (UserBookLogSlice, error) {
	setter := &UserBookLogSetter{
		UserUlid: &user0.Ulid,
	}

	err := userBookLogs1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserUserUlidUserBookLogs0: %w", err)
	}

	return userBookLogs1, nil
}

func (user0 *User) InsertUserUlidUserBookLogs(ctx context.Context, exec bob.Executor, related ...*UserBookLogSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	userBookLogs1, err := insertUserUserUlidUserBookLogs0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.UserUlidUserBookLogs = append(user0.R.UserUlidUserBookLogs, userBookLogs1...)

	for _, rel := range userBookLogs1 {
		rel.R.UserUlidUser = user0
	}
	return nil
}

func (user0 *User) AttachUserUlidUserBookLogs(ctx context.Context, exec bob.Executor, related ...*UserBookLog) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	userBookLogs1 := UserBookLogSlice(related)

	_, err = attachUserUserUlidUserBookLogs0(ctx, exec, len(related), userBookLogs1, user0)
	if err != nil {
		return err
	}

	user0.R.UserUlidUserBookLogs = append(user0.R.UserUlidUserBookLogs, userBookLogs1...)

	for _, rel := range related {
		rel.R.UserUlidUser = user0
	}

	return nil
}
