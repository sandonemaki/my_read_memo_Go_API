// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type MasterBookMod interface {
	Apply(context.Context, *MasterBookTemplate)
}

type MasterBookModFunc func(context.Context, *MasterBookTemplate)

func (f MasterBookModFunc) Apply(ctx context.Context, n *MasterBookTemplate) {
	f(ctx, n)
}

type MasterBookModSlice []MasterBookMod

func (mods MasterBookModSlice) Apply(ctx context.Context, n *MasterBookTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// MasterBookTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type MasterBookTemplate struct {
	ID          func() int64
	Isbn        func() string
	CoverS3URL  func() string
	Title       func() string
	AuthorID    func() int64
	PublisherID func() int64
	TotalPage   func() int32
	CreatedAt   func() time.Time
	UpdatedAt   func() time.Time
	PublishedAt func() time.Time

	r masterBookR
	f *Factory
}

type masterBookR struct {
	KindleHighlights []*masterBookRKindleHighlightsR
	Author           *masterBookRAuthorR
	Publisher        *masterBookRPublisherR
	RandokuImages    []*masterBookRRandokuImagesR
	RandokuMemos     []*masterBookRRandokuMemosR
	SeidokuMemos     []*masterBookRSeidokuMemosR
	UserBookLogs     []*masterBookRUserBookLogsR
}

type masterBookRKindleHighlightsR struct {
	number int
	o      *KindleHighlightTemplate
}
type masterBookRAuthorR struct {
	o *AuthorTemplate
}
type masterBookRPublisherR struct {
	o *PublisherTemplate
}
type masterBookRRandokuImagesR struct {
	number int
	o      *RandokuImageTemplate
}
type masterBookRRandokuMemosR struct {
	number int
	o      *RandokuMemoTemplate
}
type masterBookRSeidokuMemosR struct {
	number int
	o      *SeidokuMemoTemplate
}
type masterBookRUserBookLogsR struct {
	number int
	o      *UserBookLogTemplate
}

// Apply mods to the MasterBookTemplate
func (o *MasterBookTemplate) Apply(ctx context.Context, mods ...MasterBookMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.MasterBook
// according to the relationships in the template. Nothing is inserted into the db
func (t MasterBookTemplate) setModelRels(o *models.MasterBook) {
	if t.r.KindleHighlights != nil {
		rel := models.KindleHighlightSlice{}
		for _, r := range t.r.KindleHighlights {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.MasterBookID = o.ID // h2
				rel.R.MasterBook = o
			}
			rel = append(rel, related...)
		}
		o.R.KindleHighlights = rel
	}

	if t.r.Author != nil {
		rel := t.r.Author.o.Build()
		rel.R.MasterBooks = append(rel.R.MasterBooks, o)
		o.AuthorID = rel.ID // h2
		o.R.Author = rel
	}

	if t.r.Publisher != nil {
		rel := t.r.Publisher.o.Build()
		rel.R.MasterBooks = append(rel.R.MasterBooks, o)
		o.PublisherID = rel.ID // h2
		o.R.Publisher = rel
	}

	if t.r.RandokuImages != nil {
		rel := models.RandokuImageSlice{}
		for _, r := range t.r.RandokuImages {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.MasterBookID = o.ID // h2
				rel.R.MasterBook = o
			}
			rel = append(rel, related...)
		}
		o.R.RandokuImages = rel
	}

	if t.r.RandokuMemos != nil {
		rel := models.RandokuMemoSlice{}
		for _, r := range t.r.RandokuMemos {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.MasterBookID = o.ID // h2
				rel.R.MasterBook = o
			}
			rel = append(rel, related...)
		}
		o.R.RandokuMemos = rel
	}

	if t.r.SeidokuMemos != nil {
		rel := models.SeidokuMemoSlice{}
		for _, r := range t.r.SeidokuMemos {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.MasterBookID = o.ID // h2
				rel.R.MasterBook = o
			}
			rel = append(rel, related...)
		}
		o.R.SeidokuMemos = rel
	}

	if t.r.UserBookLogs != nil {
		rel := models.UserBookLogSlice{}
		for _, r := range t.r.UserBookLogs {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.MasterBookID = o.ID // h2
				rel.R.MasterBook = o
			}
			rel = append(rel, related...)
		}
		o.R.UserBookLogs = rel
	}
}

// BuildSetter returns an *models.MasterBookSetter
// this does nothing with the relationship templates
func (o MasterBookTemplate) BuildSetter() *models.MasterBookSetter {
	m := &models.MasterBookSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.Isbn != nil {
		val := o.Isbn()
		m.Isbn = &val
	}
	if o.CoverS3URL != nil {
		val := o.CoverS3URL()
		m.CoverS3URL = &val
	}
	if o.Title != nil {
		val := o.Title()
		m.Title = &val
	}
	if o.AuthorID != nil {
		val := o.AuthorID()
		m.AuthorID = &val
	}
	if o.PublisherID != nil {
		val := o.PublisherID()
		m.PublisherID = &val
	}
	if o.TotalPage != nil {
		val := o.TotalPage()
		m.TotalPage = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.PublishedAt != nil {
		val := o.PublishedAt()
		m.PublishedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.MasterBookSetter
// this does nothing with the relationship templates
func (o MasterBookTemplate) BuildManySetter(number int) []*models.MasterBookSetter {
	m := make([]*models.MasterBookSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.MasterBook
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MasterBookTemplate.Create
func (o MasterBookTemplate) Build() *models.MasterBook {
	m := &models.MasterBook{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Isbn != nil {
		m.Isbn = o.Isbn()
	}
	if o.CoverS3URL != nil {
		m.CoverS3URL = o.CoverS3URL()
	}
	if o.Title != nil {
		m.Title = o.Title()
	}
	if o.AuthorID != nil {
		m.AuthorID = o.AuthorID()
	}
	if o.PublisherID != nil {
		m.PublisherID = o.PublisherID()
	}
	if o.TotalPage != nil {
		m.TotalPage = o.TotalPage()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.PublishedAt != nil {
		m.PublishedAt = o.PublishedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.MasterBookSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MasterBookTemplate.CreateMany
func (o MasterBookTemplate) BuildMany(number int) models.MasterBookSlice {
	m := make(models.MasterBookSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableMasterBook(m *models.MasterBookSetter) {
	if m.AuthorID == nil {
		val := random_int64(nil)
		m.AuthorID = &val
	}
	if m.PublisherID == nil {
		val := random_int64(nil)
		m.PublisherID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.MasterBook
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *MasterBookTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.MasterBook) (context.Context, error) {
	var err error

	isKindleHighlightsDone, _ := masterBookRelKindleHighlightsCtx.Value(ctx)
	if !isKindleHighlightsDone && o.r.KindleHighlights != nil {
		ctx = masterBookRelKindleHighlightsCtx.WithValue(ctx, true)
		for _, r := range o.r.KindleHighlights {
			var rel0 models.KindleHighlightSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachKindleHighlights(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRandokuImagesDone, _ := masterBookRelRandokuImagesCtx.Value(ctx)
	if !isRandokuImagesDone && o.r.RandokuImages != nil {
		ctx = masterBookRelRandokuImagesCtx.WithValue(ctx, true)
		for _, r := range o.r.RandokuImages {
			var rel3 models.RandokuImageSlice
			ctx, rel3, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRandokuImages(ctx, exec, rel3...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isRandokuMemosDone, _ := masterBookRelRandokuMemosCtx.Value(ctx)
	if !isRandokuMemosDone && o.r.RandokuMemos != nil {
		ctx = masterBookRelRandokuMemosCtx.WithValue(ctx, true)
		for _, r := range o.r.RandokuMemos {
			var rel4 models.RandokuMemoSlice
			ctx, rel4, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachRandokuMemos(ctx, exec, rel4...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isSeidokuMemosDone, _ := masterBookRelSeidokuMemosCtx.Value(ctx)
	if !isSeidokuMemosDone && o.r.SeidokuMemos != nil {
		ctx = masterBookRelSeidokuMemosCtx.WithValue(ctx, true)
		for _, r := range o.r.SeidokuMemos {
			var rel5 models.SeidokuMemoSlice
			ctx, rel5, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachSeidokuMemos(ctx, exec, rel5...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isUserBookLogsDone, _ := masterBookRelUserBookLogsCtx.Value(ctx)
	if !isUserBookLogsDone && o.r.UserBookLogs != nil {
		ctx = masterBookRelUserBookLogsCtx.WithValue(ctx, true)
		for _, r := range o.r.UserBookLogs {
			var rel6 models.UserBookLogSlice
			ctx, rel6, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserBookLogs(ctx, exec, rel6...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a masterBook and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *MasterBookTemplate) Create(ctx context.Context, exec bob.Executor) (*models.MasterBook, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a masterBook and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *MasterBookTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.MasterBook {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a masterBook and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *MasterBookTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.MasterBook {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a masterBook and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *MasterBookTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.MasterBook, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableMasterBook(opt)

	if o.r.Author == nil {
		MasterBookMods.WithNewAuthor().Apply(ctx, o)
	}

	rel1, ok := authorCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.Author.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.AuthorID = &rel1.ID

	if o.r.Publisher == nil {
		MasterBookMods.WithNewPublisher().Apply(ctx, o)
	}

	rel2, ok := publisherCtx.Value(ctx)
	if !ok {
		ctx, rel2, err = o.r.Publisher.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.PublisherID = &rel2.ID

	m, err := models.MasterBooks.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = masterBookCtx.WithValue(ctx, m)

	m.R.Author = rel1
	m.R.Publisher = rel2

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple masterBooks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o MasterBookTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.MasterBookSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple masterBooks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o MasterBookTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.MasterBookSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple masterBooks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o MasterBookTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.MasterBookSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple masterBooks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o MasterBookTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.MasterBookSlice, error) {
	var err error
	m := make(models.MasterBookSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// MasterBook has methods that act as mods for the MasterBookTemplate
var MasterBookMods masterBookMods

type masterBookMods struct{}

func (m masterBookMods) RandomizeAllColumns(f *faker.Faker) MasterBookMod {
	return MasterBookModSlice{
		MasterBookMods.RandomID(f),
		MasterBookMods.RandomIsbn(f),
		MasterBookMods.RandomCoverS3URL(f),
		MasterBookMods.RandomTitle(f),
		MasterBookMods.RandomAuthorID(f),
		MasterBookMods.RandomPublisherID(f),
		MasterBookMods.RandomTotalPage(f),
		MasterBookMods.RandomCreatedAt(f),
		MasterBookMods.RandomUpdatedAt(f),
		MasterBookMods.RandomPublishedAt(f),
	}
}

// Set the model columns to this value
func (m masterBookMods) ID(val int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) IDFunc(f func() int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetID() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomID(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) Isbn(val string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Isbn = func() string { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) IsbnFunc(f func() string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Isbn = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetIsbn() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Isbn = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomIsbn(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Isbn = func() string {
			return random_string(f, "13")
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) CoverS3URL(val string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CoverS3URL = func() string { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) CoverS3URLFunc(f func() string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CoverS3URL = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetCoverS3URL() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CoverS3URL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomCoverS3URL(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CoverS3URL = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) Title(val string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Title = func() string { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) TitleFunc(f func() string) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Title = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetTitle() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Title = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomTitle(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.Title = func() string {
			return random_string(f, "60")
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) AuthorID(val int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.AuthorID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) AuthorIDFunc(f func() int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.AuthorID = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetAuthorID() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.AuthorID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomAuthorID(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.AuthorID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) PublisherID(val int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublisherID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) PublisherIDFunc(f func() int64) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublisherID = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetPublisherID() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublisherID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomPublisherID(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublisherID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) TotalPage(val int32) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.TotalPage = func() int32 { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) TotalPageFunc(f func() int32) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.TotalPage = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetTotalPage() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.TotalPage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomTotalPage(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.TotalPage = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) CreatedAt(val time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) CreatedAtFunc(f func() time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetCreatedAt() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomCreatedAt(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) UpdatedAt(val time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) UpdatedAtFunc(f func() time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetUpdatedAt() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomUpdatedAt(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m masterBookMods) PublishedAt(val time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublishedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m masterBookMods) PublishedAtFunc(f func() time.Time) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublishedAt = f
	})
}

// Clear any values for the column
func (m masterBookMods) UnsetPublishedAt() MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublishedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m masterBookMods) RandomPublishedAt(f *faker.Faker) MasterBookMod {
	return MasterBookModFunc(func(_ context.Context, o *MasterBookTemplate) {
		o.PublishedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m masterBookMods) WithParentsCascading() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		if isDone, _ := masterBookWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = masterBookWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewAuthor(ctx, AuthorMods.WithParentsCascading())
			m.WithAuthor(related).Apply(ctx, o)
		}
		{

			related := o.f.NewPublisher(ctx, PublisherMods.WithParentsCascading())
			m.WithPublisher(related).Apply(ctx, o)
		}
	})
}

func (m masterBookMods) WithAuthor(rel *AuthorTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.Author = &masterBookRAuthorR{
			o: rel,
		}
	})
}

func (m masterBookMods) WithNewAuthor(mods ...AuthorMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewAuthor(ctx, mods...)

		m.WithAuthor(related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutAuthor() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.Author = nil
	})
}

func (m masterBookMods) WithPublisher(rel *PublisherTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.Publisher = &masterBookRPublisherR{
			o: rel,
		}
	})
}

func (m masterBookMods) WithNewPublisher(mods ...PublisherMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewPublisher(ctx, mods...)

		m.WithPublisher(related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutPublisher() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.Publisher = nil
	})
}

func (m masterBookMods) WithKindleHighlights(number int, related *KindleHighlightTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.KindleHighlights = []*masterBookRKindleHighlightsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m masterBookMods) WithNewKindleHighlights(number int, mods ...KindleHighlightMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewKindleHighlight(ctx, mods...)
		m.WithKindleHighlights(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) AddKindleHighlights(number int, related *KindleHighlightTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.KindleHighlights = append(o.r.KindleHighlights, &masterBookRKindleHighlightsR{
			number: number,
			o:      related,
		})
	})
}

func (m masterBookMods) AddNewKindleHighlights(number int, mods ...KindleHighlightMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewKindleHighlight(ctx, mods...)
		m.AddKindleHighlights(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutKindleHighlights() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.KindleHighlights = nil
	})
}

func (m masterBookMods) WithRandokuImages(number int, related *RandokuImageTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuImages = []*masterBookRRandokuImagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m masterBookMods) WithNewRandokuImages(number int, mods ...RandokuImageMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewRandokuImage(ctx, mods...)
		m.WithRandokuImages(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) AddRandokuImages(number int, related *RandokuImageTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuImages = append(o.r.RandokuImages, &masterBookRRandokuImagesR{
			number: number,
			o:      related,
		})
	})
}

func (m masterBookMods) AddNewRandokuImages(number int, mods ...RandokuImageMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewRandokuImage(ctx, mods...)
		m.AddRandokuImages(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutRandokuImages() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuImages = nil
	})
}

func (m masterBookMods) WithRandokuMemos(number int, related *RandokuMemoTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuMemos = []*masterBookRRandokuMemosR{{
			number: number,
			o:      related,
		}}
	})
}

func (m masterBookMods) WithNewRandokuMemos(number int, mods ...RandokuMemoMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewRandokuMemo(ctx, mods...)
		m.WithRandokuMemos(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) AddRandokuMemos(number int, related *RandokuMemoTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuMemos = append(o.r.RandokuMemos, &masterBookRRandokuMemosR{
			number: number,
			o:      related,
		})
	})
}

func (m masterBookMods) AddNewRandokuMemos(number int, mods ...RandokuMemoMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewRandokuMemo(ctx, mods...)
		m.AddRandokuMemos(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutRandokuMemos() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.RandokuMemos = nil
	})
}

func (m masterBookMods) WithSeidokuMemos(number int, related *SeidokuMemoTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.SeidokuMemos = []*masterBookRSeidokuMemosR{{
			number: number,
			o:      related,
		}}
	})
}

func (m masterBookMods) WithNewSeidokuMemos(number int, mods ...SeidokuMemoMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewSeidokuMemo(ctx, mods...)
		m.WithSeidokuMemos(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) AddSeidokuMemos(number int, related *SeidokuMemoTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.SeidokuMemos = append(o.r.SeidokuMemos, &masterBookRSeidokuMemosR{
			number: number,
			o:      related,
		})
	})
}

func (m masterBookMods) AddNewSeidokuMemos(number int, mods ...SeidokuMemoMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewSeidokuMemo(ctx, mods...)
		m.AddSeidokuMemos(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutSeidokuMemos() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.SeidokuMemos = nil
	})
}

func (m masterBookMods) WithUserBookLogs(number int, related *UserBookLogTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.UserBookLogs = []*masterBookRUserBookLogsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m masterBookMods) WithNewUserBookLogs(number int, mods ...UserBookLogMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewUserBookLog(ctx, mods...)
		m.WithUserBookLogs(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) AddUserBookLogs(number int, related *UserBookLogTemplate) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.UserBookLogs = append(o.r.UserBookLogs, &masterBookRUserBookLogsR{
			number: number,
			o:      related,
		})
	})
}

func (m masterBookMods) AddNewUserBookLogs(number int, mods ...UserBookLogMod) MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		related := o.f.NewUserBookLog(ctx, mods...)
		m.AddUserBookLogs(number, related).Apply(ctx, o)
	})
}

func (m masterBookMods) WithoutUserBookLogs() MasterBookMod {
	return MasterBookModFunc(func(ctx context.Context, o *MasterBookTemplate) {
		o.r.UserBookLogs = nil
	})
}
