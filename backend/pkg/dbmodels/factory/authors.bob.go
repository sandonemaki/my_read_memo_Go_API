// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type AuthorMod interface {
	Apply(context.Context, *AuthorTemplate)
}

type AuthorModFunc func(context.Context, *AuthorTemplate)

func (f AuthorModFunc) Apply(ctx context.Context, n *AuthorTemplate) {
	f(ctx, n)
}

type AuthorModSlice []AuthorMod

func (mods AuthorModSlice) Apply(ctx context.Context, n *AuthorTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// AuthorTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AuthorTemplate struct {
	ID        func() int64
	Name      func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	r authorR
	f *Factory
}

type authorR struct {
	MasterBooks []*authorRMasterBooksR
}

type authorRMasterBooksR struct {
	number int
	o      *MasterBookTemplate
}

// Apply mods to the AuthorTemplate
func (o *AuthorTemplate) Apply(ctx context.Context, mods ...AuthorMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Author
// according to the relationships in the template. Nothing is inserted into the db
func (t AuthorTemplate) setModelRels(o *models.Author) {
	if t.r.MasterBooks != nil {
		rel := models.MasterBookSlice{}
		for _, r := range t.r.MasterBooks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.AuthorID = o.ID // h2
				rel.R.Author = o
			}
			rel = append(rel, related...)
		}
		o.R.MasterBooks = rel
	}
}

// BuildSetter returns an *models.AuthorSetter
// this does nothing with the relationship templates
func (o AuthorTemplate) BuildSetter() *models.AuthorSetter {
	m := &models.AuthorSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.AuthorSetter
// this does nothing with the relationship templates
func (o AuthorTemplate) BuildManySetter(number int) []*models.AuthorSetter {
	m := make([]*models.AuthorSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Author
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthorTemplate.Create
func (o AuthorTemplate) Build() *models.Author {
	m := &models.Author{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AuthorSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AuthorTemplate.CreateMany
func (o AuthorTemplate) BuildMany(number int) models.AuthorSlice {
	m := make(models.AuthorSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAuthor(m *models.AuthorSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Author
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AuthorTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Author) (context.Context, error) {
	var err error

	isMasterBooksDone, _ := authorRelMasterBooksCtx.Value(ctx)
	if !isMasterBooksDone && o.r.MasterBooks != nil {
		ctx = authorRelMasterBooksCtx.WithValue(ctx, true)
		for _, r := range o.r.MasterBooks {
			var rel0 models.MasterBookSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMasterBooks(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a author and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AuthorTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Author, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a author and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *AuthorTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Author {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a author and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *AuthorTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Author {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a author and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AuthorTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Author, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAuthor(opt)

	m, err := models.Authors.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = authorCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple authors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AuthorTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AuthorSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple authors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o AuthorTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.AuthorSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple authors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o AuthorTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.AuthorSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple authors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AuthorTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AuthorSlice, error) {
	var err error
	m := make(models.AuthorSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Author has methods that act as mods for the AuthorTemplate
var AuthorMods authorMods

type authorMods struct{}

func (m authorMods) RandomizeAllColumns(f *faker.Faker) AuthorMod {
	return AuthorModSlice{
		AuthorMods.RandomID(f),
		AuthorMods.RandomName(f),
		AuthorMods.RandomCreatedAt(f),
		AuthorMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m authorMods) ID(val int64) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m authorMods) IDFunc(f func() int64) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m authorMods) UnsetID() AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authorMods) RandomID(f *faker.Faker) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m authorMods) Name(val string) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m authorMods) NameFunc(f func() string) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m authorMods) UnsetName() AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authorMods) RandomName(f *faker.Faker) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.Name = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m authorMods) CreatedAt(val time.Time) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m authorMods) CreatedAtFunc(f func() time.Time) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m authorMods) UnsetCreatedAt() AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authorMods) RandomCreatedAt(f *faker.Faker) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m authorMods) UpdatedAt(val time.Time) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m authorMods) UpdatedAtFunc(f func() time.Time) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m authorMods) UnsetUpdatedAt() AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m authorMods) RandomUpdatedAt(f *faker.Faker) AuthorMod {
	return AuthorModFunc(func(_ context.Context, o *AuthorTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m authorMods) WithParentsCascading() AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		if isDone, _ := authorWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = authorWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m authorMods) WithMasterBooks(number int, related *MasterBookTemplate) AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		o.r.MasterBooks = []*authorRMasterBooksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m authorMods) WithNewMasterBooks(number int, mods ...MasterBookMod) AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)
		m.WithMasterBooks(number, related).Apply(ctx, o)
	})
}

func (m authorMods) AddMasterBooks(number int, related *MasterBookTemplate) AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		o.r.MasterBooks = append(o.r.MasterBooks, &authorRMasterBooksR{
			number: number,
			o:      related,
		})
	})
}

func (m authorMods) AddNewMasterBooks(number int, mods ...MasterBookMod) AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)
		m.AddMasterBooks(number, related).Apply(ctx, o)
	})
}

func (m authorMods) WithoutMasterBooks() AuthorMod {
	return AuthorModFunc(func(ctx context.Context, o *AuthorTemplate) {
		o.r.MasterBooks = nil
	})
}
