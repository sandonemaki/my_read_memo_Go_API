// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	Ulid      func() string
	Nickname  func() string
	DeletedAt func() sql.Null[time.Time]
	CreatedAt func() time.Time
	UpdatedAt func() time.Time
	UID       func() string

	r userR
	f *Factory
}

type userR struct {
	UserUlidReadingHistories []*userRUserUlidReadingHistoriesR
	UserUlidUserBookLogs     []*userRUserUlidUserBookLogsR
}

type userRUserUlidReadingHistoriesR struct {
	number int
	o      *ReadingHistoryTemplate
}
type userRUserUlidUserBookLogsR struct {
	number int
	o      *UserBookLogTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.UserUlidReadingHistories != nil {
		rel := models.ReadingHistorySlice{}
		for _, r := range t.r.UserUlidReadingHistories {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserUlid = o.Ulid // h2
				rel.R.UserUlidUser = o
			}
			rel = append(rel, related...)
		}
		o.R.UserUlidReadingHistories = rel
	}

	if t.r.UserUlidUserBookLogs != nil {
		rel := models.UserBookLogSlice{}
		for _, r := range t.r.UserUlidUserBookLogs {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.UserUlid = o.Ulid // h2
				rel.R.UserUlidUser = o
			}
			rel = append(rel, related...)
		}
		o.R.UserUlidUserBookLogs = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.Ulid != nil {
		val := o.Ulid()
		m.Ulid = &val
	}
	if o.Nickname != nil {
		val := o.Nickname()
		m.Nickname = &val
	}
	if o.DeletedAt != nil {
		val := o.DeletedAt()
		m.DeletedAt = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}
	if o.UID != nil {
		val := o.UID()
		m.UID = &val
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.Ulid != nil {
		m.Ulid = o.Ulid()
	}
	if o.Nickname != nil {
		m.Nickname = o.Nickname()
	}
	if o.DeletedAt != nil {
		m.DeletedAt = o.DeletedAt()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}
	if o.UID != nil {
		m.UID = o.UID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.Ulid == nil {
		val := random_string(nil)
		m.Ulid = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	isUserUlidReadingHistoriesDone, _ := userRelUserUlidReadingHistoriesCtx.Value(ctx)
	if !isUserUlidReadingHistoriesDone && o.r.UserUlidReadingHistories != nil {
		ctx = userRelUserUlidReadingHistoriesCtx.WithValue(ctx, true)
		for _, r := range o.r.UserUlidReadingHistories {
			var rel0 models.ReadingHistorySlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserUlidReadingHistories(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	isUserUlidUserBookLogsDone, _ := userRelUserUlidUserBookLogsCtx.Value(ctx)
	if !isUserUlidUserBookLogsDone && o.r.UserUlidUserBookLogs != nil {
		ctx = userRelUserUlidUserBookLogsCtx.WithValue(ctx, true)
		for _, r := range o.r.UserUlidUserBookLogs {
			var rel1 models.UserBookLogSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachUserUlidUserBookLogs(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomUlid(f),
		UserMods.RandomNickname(f),
		UserMods.RandomDeletedAt(f),
		UserMods.RandomCreatedAt(f),
		UserMods.RandomUpdatedAt(f),
		UserMods.RandomUID(f),
	}
}

// Set the model columns to this value
func (m userMods) Ulid(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Ulid = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UlidFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Ulid = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUlid() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Ulid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUlid(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Ulid = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Nickname(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) NicknameFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = f
	})
}

// Clear any values for the column
func (m userMods) UnsetNickname() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomNickname(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Nickname = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m userMods) DeletedAt(val sql.Null[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] { return val }
	})
}

// Set the Column from the function
func (m userMods) DeletedAtFunc(f func() sql.Null[time.Time]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDeletedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomDeletedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: f.Bool()}
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomDeletedAtNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DeletedAt = func() sql.Null[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return sql.Null[time.Time]{V: val, Valid: true}
		}
	})
}

// Set the model columns to this value
func (m userMods) CreatedAt(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) CreatedAtFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreatedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) UpdatedAt(val time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userMods) UpdatedAtFunc(f func() time.Time) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUpdatedAt() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUpdatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) UID(val string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UID = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UIDFunc(f func() string) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.UID = func() string {
			return random_string(f, "255")
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m userMods) WithUserUlidReadingHistories(number int, related *ReadingHistoryTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidReadingHistories = []*userRUserUlidReadingHistoriesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewUserUlidReadingHistories(number int, mods ...ReadingHistoryMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewReadingHistory(ctx, mods...)
		m.WithUserUlidReadingHistories(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddUserUlidReadingHistories(number int, related *ReadingHistoryTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidReadingHistories = append(o.r.UserUlidReadingHistories, &userRUserUlidReadingHistoriesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewUserUlidReadingHistories(number int, mods ...ReadingHistoryMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewReadingHistory(ctx, mods...)
		m.AddUserUlidReadingHistories(number, related).Apply(ctx, o)
	})
}

func (m userMods) WithoutUserUlidReadingHistories() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidReadingHistories = nil
	})
}

func (m userMods) WithUserUlidUserBookLogs(number int, related *UserBookLogTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidUserBookLogs = []*userRUserUlidUserBookLogsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewUserUlidUserBookLogs(number int, mods ...UserBookLogMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewUserBookLog(ctx, mods...)
		m.WithUserUlidUserBookLogs(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddUserUlidUserBookLogs(number int, related *UserBookLogTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidUserBookLogs = append(o.r.UserUlidUserBookLogs, &userRUserUlidUserBookLogsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewUserUlidUserBookLogs(number int, mods ...UserBookLogMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewUserBookLog(ctx, mods...)
		m.AddUserUlidUserBookLogs(number, related).Apply(ctx, o)
	})
}

func (m userMods) WithoutUserUlidUserBookLogs() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.UserUlidUserBookLogs = nil
	})
}
