// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type OcrTextMod interface {
	Apply(context.Context, *OcrTextTemplate)
}

type OcrTextModFunc func(context.Context, *OcrTextTemplate)

func (f OcrTextModFunc) Apply(ctx context.Context, n *OcrTextTemplate) {
	f(ctx, n)
}

type OcrTextModSlice []OcrTextMod

func (mods OcrTextModSlice) Apply(ctx context.Context, n *OcrTextTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// OcrTextTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type OcrTextTemplate struct {
	ID             func() int64
	RandokuImgUlid func() string
	Text           func() string
	CreatedAt      func() time.Time
	UpdatedAt      func() time.Time

	r ocrTextR
	f *Factory
}

type ocrTextR struct {
	RandokuImgUlidRandokuImage *ocrTextRRandokuImgUlidRandokuImageR
}

type ocrTextRRandokuImgUlidRandokuImageR struct {
	o *RandokuImageTemplate
}

// Apply mods to the OcrTextTemplate
func (o *OcrTextTemplate) Apply(ctx context.Context, mods ...OcrTextMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.OcrText
// according to the relationships in the template. Nothing is inserted into the db
func (t OcrTextTemplate) setModelRels(o *models.OcrText) {
	if t.r.RandokuImgUlidRandokuImage != nil {
		rel := t.r.RandokuImgUlidRandokuImage.o.Build()
		rel.R.RandokuImgUlidOcrText = o
		o.RandokuImgUlid = rel.Ulid // h2
		o.R.RandokuImgUlidRandokuImage = rel
	}
}

// BuildSetter returns an *models.OcrTextSetter
// this does nothing with the relationship templates
func (o OcrTextTemplate) BuildSetter() *models.OcrTextSetter {
	m := &models.OcrTextSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.RandokuImgUlid != nil {
		val := o.RandokuImgUlid()
		m.RandokuImgUlid = &val
	}
	if o.Text != nil {
		val := o.Text()
		m.Text = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.OcrTextSetter
// this does nothing with the relationship templates
func (o OcrTextTemplate) BuildManySetter(number int) []*models.OcrTextSetter {
	m := make([]*models.OcrTextSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.OcrText
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use OcrTextTemplate.Create
func (o OcrTextTemplate) Build() *models.OcrText {
	m := &models.OcrText{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.RandokuImgUlid != nil {
		m.RandokuImgUlid = o.RandokuImgUlid()
	}
	if o.Text != nil {
		m.Text = o.Text()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.OcrTextSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use OcrTextTemplate.CreateMany
func (o OcrTextTemplate) BuildMany(number int) models.OcrTextSlice {
	m := make(models.OcrTextSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableOcrText(m *models.OcrTextSetter) {
	if m.RandokuImgUlid == nil {
		val := random_string(nil)
		m.RandokuImgUlid = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.OcrText
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *OcrTextTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.OcrText) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a ocrText and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *OcrTextTemplate) Create(ctx context.Context, exec bob.Executor) (*models.OcrText, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a ocrText and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *OcrTextTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.OcrText {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a ocrText and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *OcrTextTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.OcrText {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a ocrText and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *OcrTextTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.OcrText, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableOcrText(opt)

	if o.r.RandokuImgUlidRandokuImage == nil {
		OcrTextMods.WithNewRandokuImgUlidRandokuImage().Apply(ctx, o)
	}

	ctx, rel0, err := o.r.RandokuImgUlidRandokuImage.o.create(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}

	opt.RandokuImgUlid = &rel0.Ulid

	m, err := models.OcrTexts.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = ocrTextCtx.WithValue(ctx, m)

	m.R.RandokuImgUlidRandokuImage = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple ocrTexts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o OcrTextTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.OcrTextSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple ocrTexts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o OcrTextTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.OcrTextSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple ocrTexts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o OcrTextTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.OcrTextSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple ocrTexts and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o OcrTextTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.OcrTextSlice, error) {
	var err error
	m := make(models.OcrTextSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// OcrText has methods that act as mods for the OcrTextTemplate
var OcrTextMods ocrTextMods

type ocrTextMods struct{}

func (m ocrTextMods) RandomizeAllColumns(f *faker.Faker) OcrTextMod {
	return OcrTextModSlice{
		OcrTextMods.RandomID(f),
		OcrTextMods.RandomRandokuImgUlid(f),
		OcrTextMods.RandomText(f),
		OcrTextMods.RandomCreatedAt(f),
		OcrTextMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m ocrTextMods) ID(val int64) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m ocrTextMods) IDFunc(f func() int64) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m ocrTextMods) UnsetID() OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m ocrTextMods) RandomID(f *faker.Faker) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m ocrTextMods) RandokuImgUlid(val string) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.RandokuImgUlid = func() string { return val }
	})
}

// Set the Column from the function
func (m ocrTextMods) RandokuImgUlidFunc(f func() string) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.RandokuImgUlid = f
	})
}

// Clear any values for the column
func (m ocrTextMods) UnsetRandokuImgUlid() OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.RandokuImgUlid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m ocrTextMods) RandomRandokuImgUlid(f *faker.Faker) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.RandokuImgUlid = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m ocrTextMods) Text(val string) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.Text = func() string { return val }
	})
}

// Set the Column from the function
func (m ocrTextMods) TextFunc(f func() string) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.Text = f
	})
}

// Clear any values for the column
func (m ocrTextMods) UnsetText() OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.Text = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m ocrTextMods) RandomText(f *faker.Faker) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.Text = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m ocrTextMods) CreatedAt(val time.Time) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m ocrTextMods) CreatedAtFunc(f func() time.Time) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m ocrTextMods) UnsetCreatedAt() OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m ocrTextMods) RandomCreatedAt(f *faker.Faker) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m ocrTextMods) UpdatedAt(val time.Time) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m ocrTextMods) UpdatedAtFunc(f func() time.Time) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m ocrTextMods) UnsetUpdatedAt() OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m ocrTextMods) RandomUpdatedAt(f *faker.Faker) OcrTextMod {
	return OcrTextModFunc(func(_ context.Context, o *OcrTextTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m ocrTextMods) WithParentsCascading() OcrTextMod {
	return OcrTextModFunc(func(ctx context.Context, o *OcrTextTemplate) {
		if isDone, _ := ocrTextWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = ocrTextWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewRandokuImage(ctx, RandokuImageMods.WithParentsCascading())
			m.WithRandokuImgUlidRandokuImage(related).Apply(ctx, o)
		}
	})
}

func (m ocrTextMods) WithRandokuImgUlidRandokuImage(rel *RandokuImageTemplate) OcrTextMod {
	return OcrTextModFunc(func(ctx context.Context, o *OcrTextTemplate) {
		o.r.RandokuImgUlidRandokuImage = &ocrTextRRandokuImgUlidRandokuImageR{
			o: rel,
		}
	})
}

func (m ocrTextMods) WithNewRandokuImgUlidRandokuImage(mods ...RandokuImageMod) OcrTextMod {
	return OcrTextModFunc(func(ctx context.Context, o *OcrTextTemplate) {
		related := o.f.NewRandokuImage(ctx, mods...)

		m.WithRandokuImgUlidRandokuImage(related).Apply(ctx, o)
	})
}

func (m ocrTextMods) WithoutRandokuImgUlidRandokuImage() OcrTextMod {
	return OcrTextModFunc(func(ctx context.Context, o *OcrTextTemplate) {
		o.r.RandokuImgUlidRandokuImage = nil
	})
}
