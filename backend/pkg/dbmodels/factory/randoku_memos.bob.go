// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type RandokuMemoMod interface {
	Apply(context.Context, *RandokuMemoTemplate)
}

type RandokuMemoModFunc func(context.Context, *RandokuMemoTemplate)

func (f RandokuMemoModFunc) Apply(ctx context.Context, n *RandokuMemoTemplate) {
	f(ctx, n)
}

type RandokuMemoModSlice []RandokuMemoMod

func (mods RandokuMemoModSlice) Apply(ctx context.Context, n *RandokuMemoTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// RandokuMemoTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type RandokuMemoTemplate struct {
	ID           func() int64
	MasterBookID func() int64
	Content      func() string
	ContentTag   func() int32
	CreatedAt    func() time.Time
	UpdatedAt    func() time.Time

	r randokuMemoR
	f *Factory
}

type randokuMemoR struct {
	MasterBook *randokuMemoRMasterBookR
}

type randokuMemoRMasterBookR struct {
	o *MasterBookTemplate
}

// Apply mods to the RandokuMemoTemplate
func (o *RandokuMemoTemplate) Apply(ctx context.Context, mods ...RandokuMemoMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.RandokuMemo
// according to the relationships in the template. Nothing is inserted into the db
func (t RandokuMemoTemplate) setModelRels(o *models.RandokuMemo) {
	if t.r.MasterBook != nil {
		rel := t.r.MasterBook.o.Build()
		rel.R.RandokuMemos = append(rel.R.RandokuMemos, o)
		o.MasterBookID = rel.ID // h2
		o.R.MasterBook = rel
	}
}

// BuildSetter returns an *models.RandokuMemoSetter
// this does nothing with the relationship templates
func (o RandokuMemoTemplate) BuildSetter() *models.RandokuMemoSetter {
	m := &models.RandokuMemoSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.MasterBookID != nil {
		val := o.MasterBookID()
		m.MasterBookID = &val
	}
	if o.Content != nil {
		val := o.Content()
		m.Content = &val
	}
	if o.ContentTag != nil {
		val := o.ContentTag()
		m.ContentTag = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.RandokuMemoSetter
// this does nothing with the relationship templates
func (o RandokuMemoTemplate) BuildManySetter(number int) []*models.RandokuMemoSetter {
	m := make([]*models.RandokuMemoSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.RandokuMemo
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RandokuMemoTemplate.Create
func (o RandokuMemoTemplate) Build() *models.RandokuMemo {
	m := &models.RandokuMemo{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.MasterBookID != nil {
		m.MasterBookID = o.MasterBookID()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.ContentTag != nil {
		m.ContentTag = o.ContentTag()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.RandokuMemoSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RandokuMemoTemplate.CreateMany
func (o RandokuMemoTemplate) BuildMany(number int) models.RandokuMemoSlice {
	m := make(models.RandokuMemoSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableRandokuMemo(m *models.RandokuMemoSetter) {
	if m.MasterBookID == nil {
		val := random_int64(nil)
		m.MasterBookID = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.RandokuMemo
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *RandokuMemoTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.RandokuMemo) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a randokuMemo and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *RandokuMemoTemplate) Create(ctx context.Context, exec bob.Executor) (*models.RandokuMemo, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a randokuMemo and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *RandokuMemoTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.RandokuMemo {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a randokuMemo and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *RandokuMemoTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.RandokuMemo {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a randokuMemo and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *RandokuMemoTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.RandokuMemo, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableRandokuMemo(opt)

	if o.r.MasterBook == nil {
		RandokuMemoMods.WithNewMasterBook().Apply(ctx, o)
	}

	rel0, ok := masterBookCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.MasterBook.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.MasterBookID = &rel0.ID

	m, err := models.RandokuMemos.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = randokuMemoCtx.WithValue(ctx, m)

	m.R.MasterBook = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple randokuMemos and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o RandokuMemoTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.RandokuMemoSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple randokuMemos and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o RandokuMemoTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.RandokuMemoSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple randokuMemos and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o RandokuMemoTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.RandokuMemoSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple randokuMemos and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o RandokuMemoTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.RandokuMemoSlice, error) {
	var err error
	m := make(models.RandokuMemoSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// RandokuMemo has methods that act as mods for the RandokuMemoTemplate
var RandokuMemoMods randokuMemoMods

type randokuMemoMods struct{}

func (m randokuMemoMods) RandomizeAllColumns(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModSlice{
		RandokuMemoMods.RandomID(f),
		RandokuMemoMods.RandomMasterBookID(f),
		RandokuMemoMods.RandomContent(f),
		RandokuMemoMods.RandomContentTag(f),
		RandokuMemoMods.RandomCreatedAt(f),
		RandokuMemoMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m randokuMemoMods) ID(val int64) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) IDFunc(f func() int64) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetID() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomID(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m randokuMemoMods) MasterBookID(val int64) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.MasterBookID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) MasterBookIDFunc(f func() int64) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.MasterBookID = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetMasterBookID() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.MasterBookID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomMasterBookID(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.MasterBookID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m randokuMemoMods) Content(val string) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.Content = func() string { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) ContentFunc(f func() string) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetContent() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomContent(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.Content = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m randokuMemoMods) ContentTag(val int32) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ContentTag = func() int32 { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) ContentTagFunc(f func() int32) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ContentTag = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetContentTag() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ContentTag = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomContentTag(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.ContentTag = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m randokuMemoMods) CreatedAt(val time.Time) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) CreatedAtFunc(f func() time.Time) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetCreatedAt() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomCreatedAt(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m randokuMemoMods) UpdatedAt(val time.Time) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m randokuMemoMods) UpdatedAtFunc(f func() time.Time) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m randokuMemoMods) UnsetUpdatedAt() RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuMemoMods) RandomUpdatedAt(f *faker.Faker) RandokuMemoMod {
	return RandokuMemoModFunc(func(_ context.Context, o *RandokuMemoTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m randokuMemoMods) WithParentsCascading() RandokuMemoMod {
	return RandokuMemoModFunc(func(ctx context.Context, o *RandokuMemoTemplate) {
		if isDone, _ := randokuMemoWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = randokuMemoWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewMasterBook(ctx, MasterBookMods.WithParentsCascading())
			m.WithMasterBook(related).Apply(ctx, o)
		}
	})
}

func (m randokuMemoMods) WithMasterBook(rel *MasterBookTemplate) RandokuMemoMod {
	return RandokuMemoModFunc(func(ctx context.Context, o *RandokuMemoTemplate) {
		o.r.MasterBook = &randokuMemoRMasterBookR{
			o: rel,
		}
	})
}

func (m randokuMemoMods) WithNewMasterBook(mods ...MasterBookMod) RandokuMemoMod {
	return RandokuMemoModFunc(func(ctx context.Context, o *RandokuMemoTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)

		m.WithMasterBook(related).Apply(ctx, o)
	})
}

func (m randokuMemoMods) WithoutMasterBook() RandokuMemoMod {
	return RandokuMemoModFunc(func(ctx context.Context, o *RandokuMemoTemplate) {
		o.r.MasterBook = nil
	})
}
