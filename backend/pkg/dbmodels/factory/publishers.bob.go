// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type PublisherMod interface {
	Apply(context.Context, *PublisherTemplate)
}

type PublisherModFunc func(context.Context, *PublisherTemplate)

func (f PublisherModFunc) Apply(ctx context.Context, n *PublisherTemplate) {
	f(ctx, n)
}

type PublisherModSlice []PublisherMod

func (mods PublisherModSlice) Apply(ctx context.Context, n *PublisherTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// PublisherTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PublisherTemplate struct {
	ID        func() int64
	Name      func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	r publisherR
	f *Factory
}

type publisherR struct {
	MasterBooks []*publisherRMasterBooksR
}

type publisherRMasterBooksR struct {
	number int
	o      *MasterBookTemplate
}

// Apply mods to the PublisherTemplate
func (o *PublisherTemplate) Apply(ctx context.Context, mods ...PublisherMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Publisher
// according to the relationships in the template. Nothing is inserted into the db
func (t PublisherTemplate) setModelRels(o *models.Publisher) {
	if t.r.MasterBooks != nil {
		rel := models.MasterBookSlice{}
		for _, r := range t.r.MasterBooks {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.PublisherID = o.ID // h2
				rel.R.Publisher = o
			}
			rel = append(rel, related...)
		}
		o.R.MasterBooks = rel
	}
}

// BuildSetter returns an *models.PublisherSetter
// this does nothing with the relationship templates
func (o PublisherTemplate) BuildSetter() *models.PublisherSetter {
	m := &models.PublisherSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.PublisherSetter
// this does nothing with the relationship templates
func (o PublisherTemplate) BuildManySetter(number int) []*models.PublisherSetter {
	m := make([]*models.PublisherSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Publisher
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PublisherTemplate.Create
func (o PublisherTemplate) Build() *models.Publisher {
	m := &models.Publisher{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PublisherSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PublisherTemplate.CreateMany
func (o PublisherTemplate) BuildMany(number int) models.PublisherSlice {
	m := make(models.PublisherSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePublisher(m *models.PublisherSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.Publisher
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PublisherTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Publisher) (context.Context, error) {
	var err error

	isMasterBooksDone, _ := publisherRelMasterBooksCtx.Value(ctx)
	if !isMasterBooksDone && o.r.MasterBooks != nil {
		ctx = publisherRelMasterBooksCtx.WithValue(ctx, true)
		for _, r := range o.r.MasterBooks {
			var rel0 models.MasterBookSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMasterBooks(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a publisher and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PublisherTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Publisher, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a publisher and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *PublisherTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Publisher {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a publisher and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *PublisherTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Publisher {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a publisher and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PublisherTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Publisher, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePublisher(opt)

	m, err := models.Publishers.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = publisherCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple publishers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PublisherTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PublisherSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple publishers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o PublisherTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.PublisherSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple publishers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o PublisherTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.PublisherSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple publishers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PublisherTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PublisherSlice, error) {
	var err error
	m := make(models.PublisherSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Publisher has methods that act as mods for the PublisherTemplate
var PublisherMods publisherMods

type publisherMods struct{}

func (m publisherMods) RandomizeAllColumns(f *faker.Faker) PublisherMod {
	return PublisherModSlice{
		PublisherMods.RandomID(f),
		PublisherMods.RandomName(f),
		PublisherMods.RandomCreatedAt(f),
		PublisherMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m publisherMods) ID(val int64) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m publisherMods) IDFunc(f func() int64) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m publisherMods) UnsetID() PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m publisherMods) RandomID(f *faker.Faker) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m publisherMods) Name(val string) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m publisherMods) NameFunc(f func() string) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m publisherMods) UnsetName() PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m publisherMods) RandomName(f *faker.Faker) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.Name = func() string {
			return random_string(f, "100")
		}
	})
}

// Set the model columns to this value
func (m publisherMods) CreatedAt(val time.Time) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m publisherMods) CreatedAtFunc(f func() time.Time) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m publisherMods) UnsetCreatedAt() PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m publisherMods) RandomCreatedAt(f *faker.Faker) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m publisherMods) UpdatedAt(val time.Time) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m publisherMods) UpdatedAtFunc(f func() time.Time) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m publisherMods) UnsetUpdatedAt() PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m publisherMods) RandomUpdatedAt(f *faker.Faker) PublisherMod {
	return PublisherModFunc(func(_ context.Context, o *PublisherTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m publisherMods) WithParentsCascading() PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		if isDone, _ := publisherWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = publisherWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m publisherMods) WithMasterBooks(number int, related *MasterBookTemplate) PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		o.r.MasterBooks = []*publisherRMasterBooksR{{
			number: number,
			o:      related,
		}}
	})
}

func (m publisherMods) WithNewMasterBooks(number int, mods ...MasterBookMod) PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)
		m.WithMasterBooks(number, related).Apply(ctx, o)
	})
}

func (m publisherMods) AddMasterBooks(number int, related *MasterBookTemplate) PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		o.r.MasterBooks = append(o.r.MasterBooks, &publisherRMasterBooksR{
			number: number,
			o:      related,
		})
	})
}

func (m publisherMods) AddNewMasterBooks(number int, mods ...MasterBookMod) PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)
		m.AddMasterBooks(number, related).Apply(ctx, o)
	})
}

func (m publisherMods) WithoutMasterBooks() PublisherMod {
	return PublisherModFunc(func(ctx context.Context, o *PublisherTemplate) {
		o.r.MasterBooks = nil
	})
}
