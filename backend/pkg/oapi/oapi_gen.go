// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Author defines model for Author.
type Author struct {
	// CreatedAt 作成日時
	CreatedAt time.Time `json:"created_at"`

	// Id 著者の一意識別子
	Id int64 `json:"id"`

	// Name 著者名
	Name string `json:"name"`

	// UpdatedAt 最終更新日時
	UpdatedAt time.Time `json:"updated_at"`
}

// AuthorResponse defines model for AuthorResponse.
type AuthorResponse struct {
	Author Author `json:"author"`
}

// CreateAuthor defines model for CreateAuthor.
type CreateAuthor struct {
	// Name 著者名
	Name string `json:"name"`
}

// CreatePublisher defines model for CreatePublisher.
type CreatePublisher struct {
	// Name 出版社名
	Name string `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// Publisher defines model for Publisher.
type Publisher struct {
	// CreatedAt 作成日時
	CreatedAt time.Time `json:"created_at"`

	// Id 出版社の一意識別子
	Id int64 `json:"id"`

	// Name 出版社名
	Name string `json:"name"`

	// UpdatedAt 最終更新日時
	UpdatedAt time.Time `json:"updated_at"`
}

// PublisherResponse defines model for PublisherResponse.
type PublisherResponse struct {
	Publisher Publisher `json:"publisher"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	// DisplayName ユーザー表示名
	DisplayName string `json:"display_name"`
}

// User defines model for User.
type User struct {
	// CreatedAt アカウント作成日時
	CreatedAt time.Time `json:"created_at"`

	// DeletedAt アカウント削除日時（論理削除）
	DeletedAt *time.Time `json:"deleted_at"`

	// DisplayName ユーザー表示名
	DisplayName string `json:"display_name"`

	// Uid Firebase認証UID
	Uid string `json:"uid"`

	// Ulid ユーザーの一意識別子（ULID形式）
	Ulid string `json:"ulid"`

	// UpdatedAt 最終更新日時
	UpdatedAt time.Time `json:"updated_at"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	User User `json:"user"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// SearchAuthorsParams defines parameters for SearchAuthors.
type SearchAuthorsParams struct {
	// Name 検索する著者名（部分一致）
	Name string `form:"name" json:"name"`
}

// SearchPublishersParams defines parameters for SearchPublishers.
type SearchPublishersParams struct {
	// Name 検索する出版社名（部分一致）
	Name string `form:"name" json:"name"`
}

// CreateAuthorJSONRequestBody defines body for CreateAuthor for application/json ContentType.
type CreateAuthorJSONRequestBody = CreateAuthor

// CreatePublisherJSONRequestBody defines body for CreatePublisher for application/json ContentType.
type CreatePublisherJSONRequestBody = CreatePublisher

// UpdateMeJSONRequestBody defines body for UpdateMe for application/json ContentType.
type UpdateMeJSONRequestBody = UpdateUser

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 著者一覧を取得
	// (GET /authors)
	GetAuthors(w http.ResponseWriter, r *http.Request)
	// 著者を新規作成
	// (POST /authors)
	CreateAuthor(w http.ResponseWriter, r *http.Request)
	// 著者を名前で検索
	// (GET /authors/search)
	SearchAuthors(w http.ResponseWriter, r *http.Request, params SearchAuthorsParams)
	// 著者情報を取得
	// (GET /authors/{id})
	GetAuthorById(w http.ResponseWriter, r *http.Request, id int64)
	// 出版社一覧を取得
	// (GET /publishers)
	GetPublishers(w http.ResponseWriter, r *http.Request)
	// 出版社を新規作成
	// (POST /publishers)
	CreatePublisher(w http.ResponseWriter, r *http.Request)
	// 出版社を名前で検索
	// (GET /publishers/search)
	SearchPublishers(w http.ResponseWriter, r *http.Request, params SearchPublishersParams)
	// 出版社情報を取得
	// (GET /publishers/{id})
	GetPublisherById(w http.ResponseWriter, r *http.Request, id int64)
	// 現在のユーザーアカウントを削除
	// (DELETE /users/me)
	DeleteMe(w http.ResponseWriter, r *http.Request)
	// 現在のユーザー情報を取得
	// (GET /users/me)
	GetMe(w http.ResponseWriter, r *http.Request)
	// 現在のユーザー情報を更新
	// (PUT /users/me)
	UpdateMe(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// 著者一覧を取得
// (GET /authors)
func (_ Unimplemented) GetAuthors(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 著者を新規作成
// (POST /authors)
func (_ Unimplemented) CreateAuthor(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 著者を名前で検索
// (GET /authors/search)
func (_ Unimplemented) SearchAuthors(w http.ResponseWriter, r *http.Request, params SearchAuthorsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 著者情報を取得
// (GET /authors/{id})
func (_ Unimplemented) GetAuthorById(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 出版社一覧を取得
// (GET /publishers)
func (_ Unimplemented) GetPublishers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 出版社を新規作成
// (POST /publishers)
func (_ Unimplemented) CreatePublisher(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 出版社を名前で検索
// (GET /publishers/search)
func (_ Unimplemented) SearchPublishers(w http.ResponseWriter, r *http.Request, params SearchPublishersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 出版社情報を取得
// (GET /publishers/{id})
func (_ Unimplemented) GetPublisherById(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 現在のユーザーアカウントを削除
// (DELETE /users/me)
func (_ Unimplemented) DeleteMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 現在のユーザー情報を取得
// (GET /users/me)
func (_ Unimplemented) GetMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// 現在のユーザー情報を更新
// (PUT /users/me)
func (_ Unimplemented) UpdateMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAuthors operation middleware
func (siw *ServerInterfaceWrapper) GetAuthors(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthors(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAuthor operation middleware
func (siw *ServerInterfaceWrapper) CreateAuthor(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAuthor(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchAuthors operation middleware
func (siw *ServerInterfaceWrapper) SearchAuthors(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchAuthorsParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchAuthors(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAuthorById operation middleware
func (siw *ServerInterfaceWrapper) GetAuthorById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthorById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPublishers operation middleware
func (siw *ServerInterfaceWrapper) GetPublishers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPublishers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePublisher operation middleware
func (siw *ServerInterfaceWrapper) CreatePublisher(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePublisher(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchPublishers operation middleware
func (siw *ServerInterfaceWrapper) SearchPublishers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchPublishersParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchPublishers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPublisherById operation middleware
func (siw *ServerInterfaceWrapper) GetPublisherById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPublisherById(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMe operation middleware
func (siw *ServerInterfaceWrapper) DeleteMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMe operation middleware
func (siw *ServerInterfaceWrapper) UpdateMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authors", wrapper.GetAuthors)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/authors", wrapper.CreateAuthor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authors/search", wrapper.SearchAuthors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/authors/{id}", wrapper.GetAuthorById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/publishers", wrapper.GetPublishers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/publishers", wrapper.CreatePublisher)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/publishers/search", wrapper.SearchPublishers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/publishers/{id}", wrapper.GetPublisherById)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/me", wrapper.DeleteMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetMe)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/me", wrapper.UpdateMe)
	})

	return r
}

type BadRequestJSONResponse ErrorResponse

type InternalServerErrorJSONResponse ErrorResponse

type NotFoundResponse struct {
}

type UnauthorizedResponse struct {
}

type GetAuthorsRequestObject struct {
}

type GetAuthorsResponseObject interface {
	VisitGetAuthorsResponse(w http.ResponseWriter) error
}

type GetAuthors200JSONResponse struct {
	Authors []Author `json:"authors"`
}

func (response GetAuthors200JSONResponse) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthors401Response = UnauthorizedResponse

func (response GetAuthors401Response) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetAuthors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAuthors500JSONResponse) VisitGetAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthorRequestObject struct {
	Body *CreateAuthorJSONRequestBody
}

type CreateAuthorResponseObject interface {
	VisitCreateAuthorResponse(w http.ResponseWriter) error
}

type CreateAuthor201JSONResponse AuthorResponse

func (response CreateAuthor201JSONResponse) VisitCreateAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthor400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateAuthor400JSONResponse) VisitCreateAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthor401Response = UnauthorizedResponse

func (response CreateAuthor401Response) VisitCreateAuthorResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreateAuthor409JSONResponse ErrorResponse

func (response CreateAuthor409JSONResponse) VisitCreateAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateAuthor500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateAuthor500JSONResponse) VisitCreateAuthorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchAuthorsRequestObject struct {
	Params SearchAuthorsParams
}

type SearchAuthorsResponseObject interface {
	VisitSearchAuthorsResponse(w http.ResponseWriter) error
}

type SearchAuthors200JSONResponse struct {
	Authors []Author `json:"authors"`
}

func (response SearchAuthors200JSONResponse) VisitSearchAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchAuthors400JSONResponse struct{ BadRequestJSONResponse }

func (response SearchAuthors400JSONResponse) VisitSearchAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchAuthors401Response = UnauthorizedResponse

func (response SearchAuthors401Response) VisitSearchAuthorsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SearchAuthors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response SearchAuthors500JSONResponse) VisitSearchAuthorsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetAuthorByIdResponseObject interface {
	VisitGetAuthorByIdResponse(w http.ResponseWriter) error
}

type GetAuthorById200JSONResponse AuthorResponse

func (response GetAuthorById200JSONResponse) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuthorById404Response = NotFoundResponse

func (response GetAuthorById404Response) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAuthorById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetAuthorById500JSONResponse) VisitGetAuthorByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPublishersRequestObject struct {
}

type GetPublishersResponseObject interface {
	VisitGetPublishersResponse(w http.ResponseWriter) error
}

type GetPublishers200JSONResponse struct {
	Publishers []Publisher `json:"publishers"`
}

func (response GetPublishers200JSONResponse) VisitGetPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublishers401Response = UnauthorizedResponse

func (response GetPublishers401Response) VisitGetPublishersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPublishers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPublishers500JSONResponse) VisitGetPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisherRequestObject struct {
	Body *CreatePublisherJSONRequestBody
}

type CreatePublisherResponseObject interface {
	VisitCreatePublisherResponse(w http.ResponseWriter) error
}

type CreatePublisher201JSONResponse PublisherResponse

func (response CreatePublisher201JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher400JSONResponse struct{ BadRequestJSONResponse }

func (response CreatePublisher400JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher401Response = UnauthorizedResponse

func (response CreatePublisher401Response) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type CreatePublisher409JSONResponse ErrorResponse

func (response CreatePublisher409JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreatePublisher500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreatePublisher500JSONResponse) VisitCreatePublisherResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchPublishersRequestObject struct {
	Params SearchPublishersParams
}

type SearchPublishersResponseObject interface {
	VisitSearchPublishersResponse(w http.ResponseWriter) error
}

type SearchPublishers200JSONResponse struct {
	Publishers []Publisher `json:"publishers"`
}

func (response SearchPublishers200JSONResponse) VisitSearchPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchPublishers400JSONResponse struct{ BadRequestJSONResponse }

func (response SearchPublishers400JSONResponse) VisitSearchPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchPublishers401Response = UnauthorizedResponse

func (response SearchPublishers401Response) VisitSearchPublishersResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SearchPublishers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response SearchPublishers500JSONResponse) VisitSearchPublishersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPublisherByIdRequestObject struct {
	Id int64 `json:"id"`
}

type GetPublisherByIdResponseObject interface {
	VisitGetPublisherByIdResponse(w http.ResponseWriter) error
}

type GetPublisherById200JSONResponse PublisherResponse

func (response GetPublisherById200JSONResponse) VisitGetPublisherByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPublisherById404Response = NotFoundResponse

func (response GetPublisherById404Response) VisitGetPublisherByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPublisherById500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPublisherById500JSONResponse) VisitGetPublisherByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMeRequestObject struct {
}

type DeleteMeResponseObject interface {
	VisitDeleteMeResponse(w http.ResponseWriter) error
}

type DeleteMe204Response struct {
}

func (response DeleteMe204Response) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMe401Response = UnauthorizedResponse

func (response DeleteMe401Response) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteMe404Response = NotFoundResponse

func (response DeleteMe404Response) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteMe500JSONResponse) VisitDeleteMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMeRequestObject struct {
}

type GetMeResponseObject interface {
	VisitGetMeResponse(w http.ResponseWriter) error
}

type GetMe200JSONResponse UserResponse

func (response GetMe200JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMe401Response = UnauthorizedResponse

func (response GetMe401Response) VisitGetMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetMe500JSONResponse) VisitGetMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMeRequestObject struct {
	Body *UpdateMeJSONRequestBody
}

type UpdateMeResponseObject interface {
	VisitUpdateMeResponse(w http.ResponseWriter) error
}

type UpdateMe200JSONResponse UserResponse

func (response UpdateMe200JSONResponse) VisitUpdateMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMe400JSONResponse struct{ BadRequestJSONResponse }

func (response UpdateMe400JSONResponse) VisitUpdateMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMe401Response = UnauthorizedResponse

func (response UpdateMe401Response) VisitUpdateMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateMe404Response = NotFoundResponse

func (response UpdateMe404Response) VisitUpdateMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response UpdateMe500JSONResponse) VisitUpdateMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 著者一覧を取得
	// (GET /authors)
	GetAuthors(ctx context.Context, request GetAuthorsRequestObject) (GetAuthorsResponseObject, error)
	// 著者を新規作成
	// (POST /authors)
	CreateAuthor(ctx context.Context, request CreateAuthorRequestObject) (CreateAuthorResponseObject, error)
	// 著者を名前で検索
	// (GET /authors/search)
	SearchAuthors(ctx context.Context, request SearchAuthorsRequestObject) (SearchAuthorsResponseObject, error)
	// 著者情報を取得
	// (GET /authors/{id})
	GetAuthorById(ctx context.Context, request GetAuthorByIdRequestObject) (GetAuthorByIdResponseObject, error)
	// 出版社一覧を取得
	// (GET /publishers)
	GetPublishers(ctx context.Context, request GetPublishersRequestObject) (GetPublishersResponseObject, error)
	// 出版社を新規作成
	// (POST /publishers)
	CreatePublisher(ctx context.Context, request CreatePublisherRequestObject) (CreatePublisherResponseObject, error)
	// 出版社を名前で検索
	// (GET /publishers/search)
	SearchPublishers(ctx context.Context, request SearchPublishersRequestObject) (SearchPublishersResponseObject, error)
	// 出版社情報を取得
	// (GET /publishers/{id})
	GetPublisherById(ctx context.Context, request GetPublisherByIdRequestObject) (GetPublisherByIdResponseObject, error)
	// 現在のユーザーアカウントを削除
	// (DELETE /users/me)
	DeleteMe(ctx context.Context, request DeleteMeRequestObject) (DeleteMeResponseObject, error)
	// 現在のユーザー情報を取得
	// (GET /users/me)
	GetMe(ctx context.Context, request GetMeRequestObject) (GetMeResponseObject, error)
	// 現在のユーザー情報を更新
	// (PUT /users/me)
	UpdateMe(ctx context.Context, request UpdateMeRequestObject) (UpdateMeResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAuthors operation middleware
func (sh *strictHandler) GetAuthors(w http.ResponseWriter, r *http.Request) {
	var request GetAuthorsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthors(ctx, request.(GetAuthorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorsResponseObject); ok {
		if err := validResponse.VisitGetAuthorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAuthor operation middleware
func (sh *strictHandler) CreateAuthor(w http.ResponseWriter, r *http.Request) {
	var request CreateAuthorRequestObject

	var body CreateAuthorJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAuthor(ctx, request.(CreateAuthorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAuthor")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAuthorResponseObject); ok {
		if err := validResponse.VisitCreateAuthorResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchAuthors operation middleware
func (sh *strictHandler) SearchAuthors(w http.ResponseWriter, r *http.Request, params SearchAuthorsParams) {
	var request SearchAuthorsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchAuthors(ctx, request.(SearchAuthorsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchAuthors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchAuthorsResponseObject); ok {
		if err := validResponse.VisitSearchAuthorsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthorById operation middleware
func (sh *strictHandler) GetAuthorById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetAuthorByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthorById(ctx, request.(GetAuthorByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthorById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAuthorByIdResponseObject); ok {
		if err := validResponse.VisitGetAuthorByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublishers operation middleware
func (sh *strictHandler) GetPublishers(w http.ResponseWriter, r *http.Request) {
	var request GetPublishersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublishers(ctx, request.(GetPublishersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublishers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPublishersResponseObject); ok {
		if err := validResponse.VisitGetPublishersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePublisher operation middleware
func (sh *strictHandler) CreatePublisher(w http.ResponseWriter, r *http.Request) {
	var request CreatePublisherRequestObject

	var body CreatePublisherJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePublisher(ctx, request.(CreatePublisherRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePublisher")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePublisherResponseObject); ok {
		if err := validResponse.VisitCreatePublisherResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchPublishers operation middleware
func (sh *strictHandler) SearchPublishers(w http.ResponseWriter, r *http.Request, params SearchPublishersParams) {
	var request SearchPublishersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchPublishers(ctx, request.(SearchPublishersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchPublishers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchPublishersResponseObject); ok {
		if err := validResponse.VisitSearchPublishersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPublisherById operation middleware
func (sh *strictHandler) GetPublisherById(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetPublisherByIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPublisherById(ctx, request.(GetPublisherByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPublisherById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPublisherByIdResponseObject); ok {
		if err := validResponse.VisitGetPublisherByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMe operation middleware
func (sh *strictHandler) DeleteMe(w http.ResponseWriter, r *http.Request) {
	var request DeleteMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMe(ctx, request.(DeleteMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMeResponseObject); ok {
		if err := validResponse.VisitDeleteMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMe operation middleware
func (sh *strictHandler) GetMe(w http.ResponseWriter, r *http.Request) {
	var request GetMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMe(ctx, request.(GetMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMeResponseObject); ok {
		if err := validResponse.VisitGetMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMe operation middleware
func (sh *strictHandler) UpdateMe(w http.ResponseWriter, r *http.Request) {
	var request UpdateMeRequestObject

	var body UpdateMeJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMe(ctx, request.(UpdateMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMeResponseObject); ok {
		if err := validResponse.VisitUpdateMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
