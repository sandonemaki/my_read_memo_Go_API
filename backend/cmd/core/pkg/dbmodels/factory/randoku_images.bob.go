// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/cmd/core/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type RandokuImageMod interface {
	Apply(context.Context, *RandokuImageTemplate)
}

type RandokuImageModFunc func(context.Context, *RandokuImageTemplate)

func (f RandokuImageModFunc) Apply(ctx context.Context, n *RandokuImageTemplate) {
	f(ctx, n)
}

type RandokuImageModSlice []RandokuImageMod

func (mods RandokuImageModSlice) Apply(ctx context.Context, n *RandokuImageTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// RandokuImageTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type RandokuImageTemplate struct {
	Ulid           func() string
	MasterBookID   func() int64
	IsBookmark     func() bool
	S3URL          func() string
	ThumbnailS3URL func() string
	Name           func() string
	IsAlreadyRead  func() bool
	CreatedAt      func() time.Time
	UpdatedAt      func() time.Time

	r randokuImageR
	f *Factory
}

type randokuImageR struct {
	RandokuImgUlidOcrText *randokuImageRRandokuImgUlidOcrTextR
	MasterBook            *randokuImageRMasterBookR
}

type randokuImageRRandokuImgUlidOcrTextR struct {
	o *OcrTextTemplate
}
type randokuImageRMasterBookR struct {
	o *MasterBookTemplate
}

// Apply mods to the RandokuImageTemplate
func (o *RandokuImageTemplate) Apply(ctx context.Context, mods ...RandokuImageMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.RandokuImage
// according to the relationships in the template. Nothing is inserted into the db
func (t RandokuImageTemplate) setModelRels(o *models.RandokuImage) {
	if t.r.RandokuImgUlidOcrText != nil {
		rel := t.r.RandokuImgUlidOcrText.o.Build()
		rel.R.RandokuImgUlidRandokuImage = o
		rel.RandokuImgUlid = o.Ulid // h2
		o.R.RandokuImgUlidOcrText = rel
	}

	if t.r.MasterBook != nil {
		rel := t.r.MasterBook.o.Build()
		rel.R.RandokuImages = append(rel.R.RandokuImages, o)
		o.MasterBookID = rel.ID // h2
		o.R.MasterBook = rel
	}
}

// BuildSetter returns an *models.RandokuImageSetter
// this does nothing with the relationship templates
func (o RandokuImageTemplate) BuildSetter() *models.RandokuImageSetter {
	m := &models.RandokuImageSetter{}

	if o.Ulid != nil {
		val := o.Ulid()
		m.Ulid = &val
	}
	if o.MasterBookID != nil {
		val := o.MasterBookID()
		m.MasterBookID = &val
	}
	if o.IsBookmark != nil {
		val := o.IsBookmark()
		m.IsBookmark = &val
	}
	if o.S3URL != nil {
		val := o.S3URL()
		m.S3URL = &val
	}
	if o.ThumbnailS3URL != nil {
		val := o.ThumbnailS3URL()
		m.ThumbnailS3URL = &val
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = &val
	}
	if o.IsAlreadyRead != nil {
		val := o.IsAlreadyRead()
		m.IsAlreadyRead = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.RandokuImageSetter
// this does nothing with the relationship templates
func (o RandokuImageTemplate) BuildManySetter(number int) []*models.RandokuImageSetter {
	m := make([]*models.RandokuImageSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.RandokuImage
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RandokuImageTemplate.Create
func (o RandokuImageTemplate) Build() *models.RandokuImage {
	m := &models.RandokuImage{}

	if o.Ulid != nil {
		m.Ulid = o.Ulid()
	}
	if o.MasterBookID != nil {
		m.MasterBookID = o.MasterBookID()
	}
	if o.IsBookmark != nil {
		m.IsBookmark = o.IsBookmark()
	}
	if o.S3URL != nil {
		m.S3URL = o.S3URL()
	}
	if o.ThumbnailS3URL != nil {
		m.ThumbnailS3URL = o.ThumbnailS3URL()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.IsAlreadyRead != nil {
		m.IsAlreadyRead = o.IsAlreadyRead()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.RandokuImageSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use RandokuImageTemplate.CreateMany
func (o RandokuImageTemplate) BuildMany(number int) models.RandokuImageSlice {
	m := make(models.RandokuImageSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableRandokuImage(m *models.RandokuImageSetter) {
	if m.Ulid == nil {
		val := random_string(nil)
		m.Ulid = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.RandokuImage
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *RandokuImageTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.RandokuImage) (context.Context, error) {
	var err error

	isRandokuImgUlidOcrTextDone, _ := randokuImageRelRandokuImgUlidOcrTextCtx.Value(ctx)
	if !isRandokuImgUlidOcrTextDone && o.r.RandokuImgUlidOcrText != nil {
		ctx = randokuImageRelRandokuImgUlidOcrTextCtx.WithValue(ctx, true)
		var rel0 *models.OcrText
		ctx, rel0, err = o.r.RandokuImgUlidOcrText.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachRandokuImgUlidOcrText(ctx, exec, rel0)
		if err != nil {
			return ctx, err
		}

	}

	return ctx, err
}

// Create builds a randokuImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *RandokuImageTemplate) Create(ctx context.Context, exec bob.Executor) (*models.RandokuImage, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a randokuImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *RandokuImageTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.RandokuImage {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a randokuImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *RandokuImageTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.RandokuImage {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a randokuImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *RandokuImageTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.RandokuImage, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableRandokuImage(opt)

	if o.r.MasterBook == nil {
		RandokuImageMods.WithNewMasterBook().Apply(ctx, o)
	}

	rel1, ok := masterBookCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.MasterBook.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.MasterBookID = &rel1.ID

	m, err := models.RandokuImages.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = randokuImageCtx.WithValue(ctx, m)

	m.R.MasterBook = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple randokuImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o RandokuImageTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.RandokuImageSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple randokuImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o RandokuImageTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.RandokuImageSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple randokuImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o RandokuImageTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.RandokuImageSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple randokuImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o RandokuImageTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.RandokuImageSlice, error) {
	var err error
	m := make(models.RandokuImageSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// RandokuImage has methods that act as mods for the RandokuImageTemplate
var RandokuImageMods randokuImageMods

type randokuImageMods struct{}

func (m randokuImageMods) RandomizeAllColumns(f *faker.Faker) RandokuImageMod {
	return RandokuImageModSlice{
		RandokuImageMods.RandomUlid(f),
		RandokuImageMods.RandomMasterBookID(f),
		RandokuImageMods.RandomIsBookmark(f),
		RandokuImageMods.RandomS3URL(f),
		RandokuImageMods.RandomThumbnailS3URL(f),
		RandokuImageMods.RandomName(f),
		RandokuImageMods.RandomIsAlreadyRead(f),
		RandokuImageMods.RandomCreatedAt(f),
		RandokuImageMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m randokuImageMods) Ulid(val string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Ulid = func() string { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) UlidFunc(f func() string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Ulid = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetUlid() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Ulid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomUlid(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Ulid = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) MasterBookID(val int64) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.MasterBookID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) MasterBookIDFunc(f func() int64) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.MasterBookID = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetMasterBookID() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.MasterBookID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomMasterBookID(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.MasterBookID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) IsBookmark(val bool) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsBookmark = func() bool { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) IsBookmarkFunc(f func() bool) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsBookmark = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetIsBookmark() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsBookmark = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomIsBookmark(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsBookmark = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) S3URL(val string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.S3URL = func() string { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) S3URLFunc(f func() string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.S3URL = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetS3URL() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.S3URL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomS3URL(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.S3URL = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) ThumbnailS3URL(val string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.ThumbnailS3URL = func() string { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) ThumbnailS3URLFunc(f func() string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.ThumbnailS3URL = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetThumbnailS3URL() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.ThumbnailS3URL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomThumbnailS3URL(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.ThumbnailS3URL = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) Name(val string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) NameFunc(f func() string) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetName() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomName(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.Name = func() string {
			return random_string(f, "255")
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) IsAlreadyRead(val bool) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsAlreadyRead = func() bool { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) IsAlreadyReadFunc(f func() bool) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsAlreadyRead = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetIsAlreadyRead() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsAlreadyRead = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomIsAlreadyRead(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.IsAlreadyRead = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) CreatedAt(val time.Time) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) CreatedAtFunc(f func() time.Time) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetCreatedAt() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomCreatedAt(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m randokuImageMods) UpdatedAt(val time.Time) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m randokuImageMods) UpdatedAtFunc(f func() time.Time) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m randokuImageMods) UnsetUpdatedAt() RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m randokuImageMods) RandomUpdatedAt(f *faker.Faker) RandokuImageMod {
	return RandokuImageModFunc(func(_ context.Context, o *RandokuImageTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m randokuImageMods) WithParentsCascading() RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		if isDone, _ := randokuImageWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = randokuImageWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewOcrText(ctx, OcrTextMods.WithParentsCascading())
			m.WithRandokuImgUlidOcrText(related).Apply(ctx, o)
		}
		{

			related := o.f.NewMasterBook(ctx, MasterBookMods.WithParentsCascading())
			m.WithMasterBook(related).Apply(ctx, o)
		}
	})
}

func (m randokuImageMods) WithRandokuImgUlidOcrText(rel *OcrTextTemplate) RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		o.r.RandokuImgUlidOcrText = &randokuImageRRandokuImgUlidOcrTextR{
			o: rel,
		}
	})
}

func (m randokuImageMods) WithNewRandokuImgUlidOcrText(mods ...OcrTextMod) RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		related := o.f.NewOcrText(ctx, mods...)

		m.WithRandokuImgUlidOcrText(related).Apply(ctx, o)
	})
}

func (m randokuImageMods) WithoutRandokuImgUlidOcrText() RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		o.r.RandokuImgUlidOcrText = nil
	})
}

func (m randokuImageMods) WithMasterBook(rel *MasterBookTemplate) RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		o.r.MasterBook = &randokuImageRMasterBookR{
			o: rel,
		}
	})
}

func (m randokuImageMods) WithNewMasterBook(mods ...MasterBookMod) RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)

		m.WithMasterBook(related).Apply(ctx, o)
	})
}

func (m randokuImageMods) WithoutMasterBook() RandokuImageMod {
	return RandokuImageModFunc(func(ctx context.Context, o *RandokuImageTemplate) {
		o.r.MasterBook = nil
	})
}
