// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	"github.com/jaswdr/faker/v2"
	models "github.com/sandonemaki/my_read_memo_Go_API/backend/cmd/core/pkg/dbmodels"
	"github.com/stephenafamo/bob"
)

type UserBookLogMod interface {
	Apply(context.Context, *UserBookLogTemplate)
}

type UserBookLogModFunc func(context.Context, *UserBookLogTemplate)

func (f UserBookLogModFunc) Apply(ctx context.Context, n *UserBookLogTemplate) {
	f(ctx, n)
}

type UserBookLogModSlice []UserBookLogMod

func (mods UserBookLogModSlice) Apply(ctx context.Context, n *UserBookLogTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserBookLogTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserBookLogTemplate struct {
	ID           func() int64
	UserUlid     func() string
	MasterBookID func() int64
	Status       func() int32
	IsSeidokuKey func() bool
	RegisteredAt func() time.Time
	CreatedAt    func() time.Time

	r userBookLogR
	f *Factory
}

type userBookLogR struct {
	MasterBook   *userBookLogRMasterBookR
	UserUlidUser *userBookLogRUserUlidUserR
}

type userBookLogRMasterBookR struct {
	o *MasterBookTemplate
}
type userBookLogRUserUlidUserR struct {
	o *UserTemplate
}

// Apply mods to the UserBookLogTemplate
func (o *UserBookLogTemplate) Apply(ctx context.Context, mods ...UserBookLogMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.UserBookLog
// according to the relationships in the template. Nothing is inserted into the db
func (t UserBookLogTemplate) setModelRels(o *models.UserBookLog) {
	if t.r.MasterBook != nil {
		rel := t.r.MasterBook.o.Build()
		rel.R.UserBookLogs = append(rel.R.UserBookLogs, o)
		o.MasterBookID = rel.ID // h2
		o.R.MasterBook = rel
	}

	if t.r.UserUlidUser != nil {
		rel := t.r.UserUlidUser.o.Build()
		rel.R.UserUlidUserBookLogs = append(rel.R.UserUlidUserBookLogs, o)
		o.UserUlid = rel.Ulid // h2
		o.R.UserUlidUser = rel
	}
}

// BuildSetter returns an *models.UserBookLogSetter
// this does nothing with the relationship templates
func (o UserBookLogTemplate) BuildSetter() *models.UserBookLogSetter {
	m := &models.UserBookLogSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = &val
	}
	if o.UserUlid != nil {
		val := o.UserUlid()
		m.UserUlid = &val
	}
	if o.MasterBookID != nil {
		val := o.MasterBookID()
		m.MasterBookID = &val
	}
	if o.Status != nil {
		val := o.Status()
		m.Status = &val
	}
	if o.IsSeidokuKey != nil {
		val := o.IsSeidokuKey()
		m.IsSeidokuKey = &val
	}
	if o.RegisteredAt != nil {
		val := o.RegisteredAt()
		m.RegisteredAt = &val
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = &val
	}

	return m
}

// BuildManySetter returns an []*models.UserBookLogSetter
// this does nothing with the relationship templates
func (o UserBookLogTemplate) BuildManySetter(number int) []*models.UserBookLogSetter {
	m := make([]*models.UserBookLogSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserBookLog
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserBookLogTemplate.Create
func (o UserBookLogTemplate) Build() *models.UserBookLog {
	m := &models.UserBookLog{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserUlid != nil {
		m.UserUlid = o.UserUlid()
	}
	if o.MasterBookID != nil {
		m.MasterBookID = o.MasterBookID()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.IsSeidokuKey != nil {
		m.IsSeidokuKey = o.IsSeidokuKey()
	}
	if o.RegisteredAt != nil {
		m.RegisteredAt = o.RegisteredAt()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserBookLogSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserBookLogTemplate.CreateMany
func (o UserBookLogTemplate) BuildMany(number int) models.UserBookLogSlice {
	m := make(models.UserBookLogSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserBookLog(m *models.UserBookLogSetter) {
	if m.UserUlid == nil {
		val := random_string(nil)
		m.UserUlid = &val
	}
	if m.MasterBookID == nil {
		val := random_int64(nil)
		m.MasterBookID = &val
	}
	if m.RegisteredAt == nil {
		val := random_time_Time(nil)
		m.RegisteredAt = &val
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserBookLog
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserBookLogTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserBookLog) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userBookLog and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserBookLogTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserBookLog, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a userBookLog and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserBookLogTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.UserBookLog {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a userBookLog and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserBookLogTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.UserBookLog {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a userBookLog and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserBookLogTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserBookLog, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserBookLog(opt)

	if o.r.MasterBook == nil {
		UserBookLogMods.WithNewMasterBook().Apply(ctx, o)
	}

	rel0, ok := masterBookCtx.Value(ctx)
	if !ok {
		ctx, rel0, err = o.r.MasterBook.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.MasterBookID = &rel0.ID

	if o.r.UserUlidUser == nil {
		UserBookLogMods.WithNewUserUlidUser().Apply(ctx, o)
	}

	rel1, ok := userCtx.Value(ctx)
	if !ok {
		ctx, rel1, err = o.r.UserUlidUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	opt.UserUlid = &rel1.Ulid

	m, err := models.UserBookLogs.Insert(opt).One(ctx, exec)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userBookLogCtx.WithValue(ctx, m)

	m.R.MasterBook = rel0
	m.R.UserUlidUser = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userBookLogs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserBookLogTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserBookLogSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple userBookLogs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserBookLogTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserBookLogSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple userBookLogs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserBookLogTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserBookLogSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple userBookLogs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserBookLogTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserBookLogSlice, error) {
	var err error
	m := make(models.UserBookLogSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserBookLog has methods that act as mods for the UserBookLogTemplate
var UserBookLogMods userBookLogMods

type userBookLogMods struct{}

func (m userBookLogMods) RandomizeAllColumns(f *faker.Faker) UserBookLogMod {
	return UserBookLogModSlice{
		UserBookLogMods.RandomID(f),
		UserBookLogMods.RandomUserUlid(f),
		UserBookLogMods.RandomMasterBookID(f),
		UserBookLogMods.RandomStatus(f),
		UserBookLogMods.RandomIsSeidokuKey(f),
		UserBookLogMods.RandomRegisteredAt(f),
		UserBookLogMods.RandomCreatedAt(f),
	}
}

// Set the model columns to this value
func (m userBookLogMods) ID(val int64) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) IDFunc(f func() int64) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetID() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomID(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) UserUlid(val string) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.UserUlid = func() string { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) UserUlidFunc(f func() string) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.UserUlid = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetUserUlid() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.UserUlid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomUserUlid(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.UserUlid = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) MasterBookID(val int64) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.MasterBookID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) MasterBookIDFunc(f func() int64) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.MasterBookID = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetMasterBookID() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.MasterBookID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomMasterBookID(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.MasterBookID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) Status(val int32) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.Status = func() int32 { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) StatusFunc(f func() int32) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetStatus() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomStatus(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.Status = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) IsSeidokuKey(val bool) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.IsSeidokuKey = func() bool { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) IsSeidokuKeyFunc(f func() bool) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.IsSeidokuKey = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetIsSeidokuKey() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.IsSeidokuKey = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomIsSeidokuKey(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.IsSeidokuKey = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) RegisteredAt(val time.Time) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.RegisteredAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) RegisteredAtFunc(f func() time.Time) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.RegisteredAt = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetRegisteredAt() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.RegisteredAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomRegisteredAt(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.RegisteredAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m userBookLogMods) CreatedAt(val time.Time) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userBookLogMods) CreatedAtFunc(f func() time.Time) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userBookLogMods) UnsetCreatedAt() UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userBookLogMods) RandomCreatedAt(f *faker.Faker) UserBookLogMod {
	return UserBookLogModFunc(func(_ context.Context, o *UserBookLogTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m userBookLogMods) WithParentsCascading() UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		if isDone, _ := userBookLogWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userBookLogWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewMasterBook(ctx, MasterBookMods.WithParentsCascading())
			m.WithMasterBook(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUser(ctx, UserMods.WithParentsCascading())
			m.WithUserUlidUser(related).Apply(ctx, o)
		}
	})
}

func (m userBookLogMods) WithMasterBook(rel *MasterBookTemplate) UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		o.r.MasterBook = &userBookLogRMasterBookR{
			o: rel,
		}
	})
}

func (m userBookLogMods) WithNewMasterBook(mods ...MasterBookMod) UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		related := o.f.NewMasterBook(ctx, mods...)

		m.WithMasterBook(related).Apply(ctx, o)
	})
}

func (m userBookLogMods) WithoutMasterBook() UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		o.r.MasterBook = nil
	})
}

func (m userBookLogMods) WithUserUlidUser(rel *UserTemplate) UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		o.r.UserUlidUser = &userBookLogRUserUlidUserR{
			o: rel,
		}
	})
}

func (m userBookLogMods) WithNewUserUlidUser(mods ...UserMod) UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		related := o.f.NewUser(ctx, mods...)

		m.WithUserUlidUser(related).Apply(ctx, o)
	})
}

func (m userBookLogMods) WithoutUserUlidUser() UserBookLogMod {
	return UserBookLogModFunc(func(ctx context.Context, o *UserBookLogTemplate) {
		o.r.UserUlidUser = nil
	})
}
