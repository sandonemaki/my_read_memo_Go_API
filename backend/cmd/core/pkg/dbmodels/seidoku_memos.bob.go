// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// SeidokuMemo is an object representing the database table.
type SeidokuMemo struct {
	ID           int64     `db:"id,pk" `
	MasterBookID int64     `db:"master_book_id" `
	Content      string    `db:"content" `
	ContentTag   int32     `db:"content_tag" `
	CreatedAt    time.Time `db:"created_at" `
	UpdatedAt    time.Time `db:"updated_at" `

	R seidokuMemoR `db:"-" `
}

// SeidokuMemoSlice is an alias for a slice of pointers to SeidokuMemo.
// This should almost always be used instead of []*SeidokuMemo.
type SeidokuMemoSlice []*SeidokuMemo

// SeidokuMemos contains methods to work with the seidoku_memos table
var SeidokuMemos = psql.NewTablex[*SeidokuMemo, SeidokuMemoSlice, *SeidokuMemoSetter]("", "seidoku_memos")

// SeidokuMemosQuery is a query on the seidoku_memos table
type SeidokuMemosQuery = *psql.ViewQuery[*SeidokuMemo, SeidokuMemoSlice]

// seidokuMemoR is where relationships are stored.
type seidokuMemoR struct {
	MasterBook *MasterBook // seidoku_memos.seidoku_memos_master_book_id_fkey
}

type seidokuMemoColumnNames struct {
	ID           string
	MasterBookID string
	Content      string
	ContentTag   string
	CreatedAt    string
	UpdatedAt    string
}

var SeidokuMemoColumns = buildSeidokuMemoColumns("seidoku_memos")

type seidokuMemoColumns struct {
	tableAlias   string
	ID           psql.Expression
	MasterBookID psql.Expression
	Content      psql.Expression
	ContentTag   psql.Expression
	CreatedAt    psql.Expression
	UpdatedAt    psql.Expression
}

func (c seidokuMemoColumns) Alias() string {
	return c.tableAlias
}

func (seidokuMemoColumns) AliasedAs(alias string) seidokuMemoColumns {
	return buildSeidokuMemoColumns(alias)
}

func buildSeidokuMemoColumns(alias string) seidokuMemoColumns {
	return seidokuMemoColumns{
		tableAlias:   alias,
		ID:           psql.Quote(alias, "id"),
		MasterBookID: psql.Quote(alias, "master_book_id"),
		Content:      psql.Quote(alias, "content"),
		ContentTag:   psql.Quote(alias, "content_tag"),
		CreatedAt:    psql.Quote(alias, "created_at"),
		UpdatedAt:    psql.Quote(alias, "updated_at"),
	}
}

type seidokuMemoWhere[Q psql.Filterable] struct {
	ID           psql.WhereMod[Q, int64]
	MasterBookID psql.WhereMod[Q, int64]
	Content      psql.WhereMod[Q, string]
	ContentTag   psql.WhereMod[Q, int32]
	CreatedAt    psql.WhereMod[Q, time.Time]
	UpdatedAt    psql.WhereMod[Q, time.Time]
}

func (seidokuMemoWhere[Q]) AliasedAs(alias string) seidokuMemoWhere[Q] {
	return buildSeidokuMemoWhere[Q](buildSeidokuMemoColumns(alias))
}

func buildSeidokuMemoWhere[Q psql.Filterable](cols seidokuMemoColumns) seidokuMemoWhere[Q] {
	return seidokuMemoWhere[Q]{
		ID:           psql.Where[Q, int64](cols.ID),
		MasterBookID: psql.Where[Q, int64](cols.MasterBookID),
		Content:      psql.Where[Q, string](cols.Content),
		ContentTag:   psql.Where[Q, int32](cols.ContentTag),
		CreatedAt:    psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:    psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var SeidokuMemoErrors = &seidokuMemoErrors{
	ErrUniqueSeidokuMemosPkey: &UniqueConstraintError{
		schema:  "",
		table:   "seidoku_memos",
		columns: []string{"id"},
		s:       "seidoku_memos_pkey",
	},
}

type seidokuMemoErrors struct {
	ErrUniqueSeidokuMemosPkey *UniqueConstraintError
}

// SeidokuMemoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SeidokuMemoSetter struct {
	ID           *int64     `db:"id,pk" `
	MasterBookID *int64     `db:"master_book_id" `
	Content      *string    `db:"content" `
	ContentTag   *int32     `db:"content_tag" `
	CreatedAt    *time.Time `db:"created_at" `
	UpdatedAt    *time.Time `db:"updated_at" `
}

func (s SeidokuMemoSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.MasterBookID != nil {
		vals = append(vals, "master_book_id")
	}

	if s.Content != nil {
		vals = append(vals, "content")
	}

	if s.ContentTag != nil {
		vals = append(vals, "content_tag")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s SeidokuMemoSetter) Overwrite(t *SeidokuMemo) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.MasterBookID != nil {
		t.MasterBookID = *s.MasterBookID
	}
	if s.Content != nil {
		t.Content = *s.Content
	}
	if s.ContentTag != nil {
		t.ContentTag = *s.ContentTag
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *SeidokuMemoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return SeidokuMemos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.MasterBookID != nil {
			vals[1] = psql.Arg(*s.MasterBookID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Content != nil {
			vals[2] = psql.Arg(*s.Content)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.ContentTag != nil {
			vals[3] = psql.Arg(*s.ContentTag)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[4] = psql.Arg(*s.CreatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[5] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s SeidokuMemoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s SeidokuMemoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.MasterBookID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "master_book_id")...),
			psql.Arg(s.MasterBookID),
		}})
	}

	if s.Content != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content")...),
			psql.Arg(s.Content),
		}})
	}

	if s.ContentTag != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content_tag")...),
			psql.Arg(s.ContentTag),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindSeidokuMemo retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSeidokuMemo(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*SeidokuMemo, error) {
	if len(cols) == 0 {
		return SeidokuMemos.Query(
			SelectWhere.SeidokuMemos.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return SeidokuMemos.Query(
		SelectWhere.SeidokuMemos.ID.EQ(IDPK),
		sm.Columns(SeidokuMemos.Columns().Only(cols...)),
	).One(ctx, exec)
}

// SeidokuMemoExists checks the presence of a single record by primary key
func SeidokuMemoExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return SeidokuMemos.Query(
		SelectWhere.SeidokuMemos.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after SeidokuMemo is retrieved from the database
func (o *SeidokuMemo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SeidokuMemos.AfterSelectHooks.RunHooks(ctx, exec, SeidokuMemoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = SeidokuMemos.AfterInsertHooks.RunHooks(ctx, exec, SeidokuMemoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = SeidokuMemos.AfterUpdateHooks.RunHooks(ctx, exec, SeidokuMemoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = SeidokuMemos.AfterDeleteHooks.RunHooks(ctx, exec, SeidokuMemoSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the SeidokuMemo
func (o *SeidokuMemo) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *SeidokuMemo) pkEQ() dialect.Expression {
	return psql.Quote("seidoku_memos", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the SeidokuMemo
func (o *SeidokuMemo) Update(ctx context.Context, exec bob.Executor, s *SeidokuMemoSetter) error {
	v, err := SeidokuMemos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single SeidokuMemo record with an executor
func (o *SeidokuMemo) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := SeidokuMemos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the SeidokuMemo using the executor
func (o *SeidokuMemo) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := SeidokuMemos.Query(
		SelectWhere.SeidokuMemos.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after SeidokuMemoSlice is retrieved from the database
func (o SeidokuMemoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = SeidokuMemos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = SeidokuMemos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = SeidokuMemos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = SeidokuMemos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o SeidokuMemoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("seidoku_memos", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o SeidokuMemoSlice) copyMatchingRows(from ...*SeidokuMemo) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o SeidokuMemoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SeidokuMemos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SeidokuMemo:
				o.copyMatchingRows(retrieved)
			case []*SeidokuMemo:
				o.copyMatchingRows(retrieved...)
			case SeidokuMemoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SeidokuMemo or a slice of SeidokuMemo
				// then run the AfterUpdateHooks on the slice
				_, err = SeidokuMemos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o SeidokuMemoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return SeidokuMemos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *SeidokuMemo:
				o.copyMatchingRows(retrieved)
			case []*SeidokuMemo:
				o.copyMatchingRows(retrieved...)
			case SeidokuMemoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a SeidokuMemo or a slice of SeidokuMemo
				// then run the AfterDeleteHooks on the slice
				_, err = SeidokuMemos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o SeidokuMemoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SeidokuMemoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SeidokuMemos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o SeidokuMemoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := SeidokuMemos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o SeidokuMemoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := SeidokuMemos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type seidokuMemoJoins[Q dialect.Joinable] struct {
	typ        string
	MasterBook modAs[Q, masterBookColumns]
}

func (j seidokuMemoJoins[Q]) aliasedAs(alias string) seidokuMemoJoins[Q] {
	return buildSeidokuMemoJoins[Q](buildSeidokuMemoColumns(alias), j.typ)
}

func buildSeidokuMemoJoins[Q dialect.Joinable](cols seidokuMemoColumns, typ string) seidokuMemoJoins[Q] {
	return seidokuMemoJoins[Q]{
		typ: typ,
		MasterBook: modAs[Q, masterBookColumns]{
			c: MasterBookColumns,
			f: func(to masterBookColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, MasterBooks.Name().As(to.Alias())).On(
						to.ID.EQ(cols.MasterBookID),
					))
				}

				return mods
			},
		},
	}
}

// MasterBook starts a query for related objects on master_books
func (o *SeidokuMemo) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	return MasterBooks.Query(append(mods,
		sm.Where(MasterBookColumns.ID.EQ(psql.Arg(o.MasterBookID))),
	)...)
}

func (os SeidokuMemoSlice) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	pkMasterBookID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkMasterBookID[i] = o.MasterBookID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkMasterBookID), "bigint[]")),
	))

	return MasterBooks.Query(append(mods,
		sm.Where(psql.Group(MasterBookColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *SeidokuMemo) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "MasterBook":
		rel, ok := retrieved.(*MasterBook)
		if !ok {
			return fmt.Errorf("seidokuMemo cannot load %T as %q", retrieved, name)
		}

		o.R.MasterBook = rel

		if rel != nil {
			rel.R.SeidokuMemos = SeidokuMemoSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("seidokuMemo has no relationship %q", name)
	}
}

type seidokuMemoPreloader struct {
	MasterBook func(...psql.PreloadOption) psql.Preloader
}

func buildSeidokuMemoPreloader() seidokuMemoPreloader {
	return seidokuMemoPreloader{
		MasterBook: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*MasterBook, MasterBookSlice](orm.Relationship{
				Name: "MasterBook",
				Sides: []orm.RelSide{
					{
						From: TableNames.SeidokuMemos,
						To:   TableNames.MasterBooks,
						FromColumns: []string{
							ColumnNames.SeidokuMemos.MasterBookID,
						},
						ToColumns: []string{
							ColumnNames.MasterBooks.ID,
						},
					},
				},
			}, MasterBooks.Columns().Names(), opts...)
		},
	}
}

type seidokuMemoThenLoader[Q orm.Loadable] struct {
	MasterBook func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildSeidokuMemoThenLoader[Q orm.Loadable]() seidokuMemoThenLoader[Q] {
	type MasterBookLoadInterface interface {
		LoadMasterBook(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return seidokuMemoThenLoader[Q]{
		MasterBook: thenLoadBuilder[Q](
			"MasterBook",
			func(ctx context.Context, exec bob.Executor, retrieved MasterBookLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadMasterBook(ctx, exec, mods...)
			},
		),
	}
}

// LoadMasterBook loads the seidokuMemo's MasterBook into the .R struct
func (o *SeidokuMemo) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.MasterBook = nil

	related, err := o.MasterBook(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.SeidokuMemos = SeidokuMemoSlice{o}

	o.R.MasterBook = related
	return nil
}

// LoadMasterBook loads the seidokuMemo's MasterBook into the .R struct
func (os SeidokuMemoSlice) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	masterBooks, err := os.MasterBook(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range masterBooks {
			if o.MasterBookID != rel.ID {
				continue
			}

			rel.R.SeidokuMemos = append(rel.R.SeidokuMemos, o)

			o.R.MasterBook = rel
			break
		}
	}

	return nil
}

func attachSeidokuMemoMasterBook0(ctx context.Context, exec bob.Executor, count int, seidokuMemo0 *SeidokuMemo, masterBook1 *MasterBook) (*SeidokuMemo, error) {
	setter := &SeidokuMemoSetter{
		MasterBookID: &masterBook1.ID,
	}

	err := seidokuMemo0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachSeidokuMemoMasterBook0: %w", err)
	}

	return seidokuMemo0, nil
}

func (seidokuMemo0 *SeidokuMemo) InsertMasterBook(ctx context.Context, exec bob.Executor, related *MasterBookSetter) error {
	masterBook1, err := MasterBooks.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachSeidokuMemoMasterBook0(ctx, exec, 1, seidokuMemo0, masterBook1)
	if err != nil {
		return err
	}

	seidokuMemo0.R.MasterBook = masterBook1

	masterBook1.R.SeidokuMemos = append(masterBook1.R.SeidokuMemos, seidokuMemo0)

	return nil
}

func (seidokuMemo0 *SeidokuMemo) AttachMasterBook(ctx context.Context, exec bob.Executor, masterBook1 *MasterBook) error {
	var err error

	_, err = attachSeidokuMemoMasterBook0(ctx, exec, 1, seidokuMemo0, masterBook1)
	if err != nil {
		return err
	}

	seidokuMemo0.R.MasterBook = masterBook1

	masterBook1.R.SeidokuMemos = append(masterBook1.R.SeidokuMemos, seidokuMemo0)

	return nil
}
