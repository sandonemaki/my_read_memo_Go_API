// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/kima/yondeco_go/backend/core/usecase/publisher.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	input "github.com/sandonemaki/my_read_memo_Go_API/backend/core/usecase/input"
	output "github.com/sandonemaki/my_read_memo_Go_API/backend/core/usecase/output"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPublisher) Create(ctx context.Context, in input.CreatePublisher) (*output.CreatePublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*output.CreatePublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPublisherMockRecorder) Create(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPublisher)(nil).Create), ctx, in)
}

// GetByID mocks base method.
func (m *MockPublisher) GetByID(ctx context.Context, publisherID int64) (*output.GetPublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, publisherID)
	ret0, _ := ret[0].(*output.GetPublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPublisherMockRecorder) GetByID(ctx, publisherID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPublisher)(nil).GetByID), ctx, publisherID)
}

// List mocks base method.
func (m *MockPublisher) List(ctx context.Context) (*output.ListPublishers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(*output.ListPublishers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPublisherMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPublisher)(nil).List), ctx)
}

// SearchByName mocks base method.
func (m *MockPublisher) SearchByName(ctx context.Context, name string) (*output.ListPublishers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].(*output.ListPublishers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockPublisherMockRecorder) SearchByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockPublisher)(nil).SearchByName), ctx, name)
}
