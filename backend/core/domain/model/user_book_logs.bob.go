// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// UserBookLog is an object representing the database table.
type UserBookLog struct {
	ID           int64     `db:"id,pk" `
	UserUlid     string    `db:"user_ulid" `
	MasterBookID int64     `db:"master_book_id" `
	Status       int32     `db:"status" `
	IsSeidokuKey bool      `db:"is_seidoku_key" `
	RegisteredAt time.Time `db:"registered_at" `
	CreatedAt    time.Time `db:"created_at" `

	R userBookLogR `db:"-" `
}

// UserBookLogSlice is an alias for a slice of pointers to UserBookLog.
// This should almost always be used instead of []*UserBookLog.
type UserBookLogSlice []*UserBookLog

// UserBookLogs contains methods to work with the user_book_logs table
var UserBookLogs = psql.NewTablex[*UserBookLog, UserBookLogSlice, *UserBookLogSetter]("", "user_book_logs")

// UserBookLogsQuery is a query on the user_book_logs table
type UserBookLogsQuery = *psql.ViewQuery[*UserBookLog, UserBookLogSlice]

// userBookLogR is where relationships are stored.
type userBookLogR struct {
	MasterBook   *MasterBook // user_book_logs.user_book_logs_master_book_id_fkey
	UserUlidUser *User       // user_book_logs.user_book_logs_user_ulid_fkey
}

type userBookLogColumnNames struct {
	ID           string
	UserUlid     string
	MasterBookID string
	Status       string
	IsSeidokuKey string
	RegisteredAt string
	CreatedAt    string
}

var UserBookLogColumns = buildUserBookLogColumns("user_book_logs")

type userBookLogColumns struct {
	tableAlias   string
	ID           psql.Expression
	UserUlid     psql.Expression
	MasterBookID psql.Expression
	Status       psql.Expression
	IsSeidokuKey psql.Expression
	RegisteredAt psql.Expression
	CreatedAt    psql.Expression
}

func (c userBookLogColumns) Alias() string {
	return c.tableAlias
}

func (userBookLogColumns) AliasedAs(alias string) userBookLogColumns {
	return buildUserBookLogColumns(alias)
}

func buildUserBookLogColumns(alias string) userBookLogColumns {
	return userBookLogColumns{
		tableAlias:   alias,
		ID:           psql.Quote(alias, "id"),
		UserUlid:     psql.Quote(alias, "user_ulid"),
		MasterBookID: psql.Quote(alias, "master_book_id"),
		Status:       psql.Quote(alias, "status"),
		IsSeidokuKey: psql.Quote(alias, "is_seidoku_key"),
		RegisteredAt: psql.Quote(alias, "registered_at"),
		CreatedAt:    psql.Quote(alias, "created_at"),
	}
}

type userBookLogWhere[Q psql.Filterable] struct {
	ID           psql.WhereMod[Q, int64]
	UserUlid     psql.WhereMod[Q, string]
	MasterBookID psql.WhereMod[Q, int64]
	Status       psql.WhereMod[Q, int32]
	IsSeidokuKey psql.WhereMod[Q, bool]
	RegisteredAt psql.WhereMod[Q, time.Time]
	CreatedAt    psql.WhereMod[Q, time.Time]
}

func (userBookLogWhere[Q]) AliasedAs(alias string) userBookLogWhere[Q] {
	return buildUserBookLogWhere[Q](buildUserBookLogColumns(alias))
}

func buildUserBookLogWhere[Q psql.Filterable](cols userBookLogColumns) userBookLogWhere[Q] {
	return userBookLogWhere[Q]{
		ID:           psql.Where[Q, int64](cols.ID),
		UserUlid:     psql.Where[Q, string](cols.UserUlid),
		MasterBookID: psql.Where[Q, int64](cols.MasterBookID),
		Status:       psql.Where[Q, int32](cols.Status),
		IsSeidokuKey: psql.Where[Q, bool](cols.IsSeidokuKey),
		RegisteredAt: psql.Where[Q, time.Time](cols.RegisteredAt),
		CreatedAt:    psql.Where[Q, time.Time](cols.CreatedAt),
	}
}

var UserBookLogErrors = &userBookLogErrors{
	ErrUniqueUserBookLogsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "user_book_logs",
		columns: []string{"id"},
		s:       "user_book_logs_pkey",
	},

	ErrUniqueUserBookLogsUserUlidMasterBookIdKey: &UniqueConstraintError{
		schema:  "",
		table:   "user_book_logs",
		columns: []string{"user_ulid", "master_book_id"},
		s:       "user_book_logs_user_ulid_master_book_id_key",
	},
}

type userBookLogErrors struct {
	ErrUniqueUserBookLogsPkey *UniqueConstraintError

	ErrUniqueUserBookLogsUserUlidMasterBookIdKey *UniqueConstraintError
}

// UserBookLogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserBookLogSetter struct {
	ID           *int64     `db:"id,pk" `
	UserUlid     *string    `db:"user_ulid" `
	MasterBookID *int64     `db:"master_book_id" `
	Status       *int32     `db:"status" `
	IsSeidokuKey *bool      `db:"is_seidoku_key" `
	RegisteredAt *time.Time `db:"registered_at" `
	CreatedAt    *time.Time `db:"created_at" `
}

func (s UserBookLogSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.UserUlid != nil {
		vals = append(vals, "user_ulid")
	}

	if s.MasterBookID != nil {
		vals = append(vals, "master_book_id")
	}

	if s.Status != nil {
		vals = append(vals, "status")
	}

	if s.IsSeidokuKey != nil {
		vals = append(vals, "is_seidoku_key")
	}

	if s.RegisteredAt != nil {
		vals = append(vals, "registered_at")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	return vals
}

func (s UserBookLogSetter) Overwrite(t *UserBookLog) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.UserUlid != nil {
		t.UserUlid = *s.UserUlid
	}
	if s.MasterBookID != nil {
		t.MasterBookID = *s.MasterBookID
	}
	if s.Status != nil {
		t.Status = *s.Status
	}
	if s.IsSeidokuKey != nil {
		t.IsSeidokuKey = *s.IsSeidokuKey
	}
	if s.RegisteredAt != nil {
		t.RegisteredAt = *s.RegisteredAt
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
}

func (s *UserBookLogSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return UserBookLogs.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.UserUlid != nil {
			vals[1] = psql.Arg(*s.UserUlid)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.MasterBookID != nil {
			vals[2] = psql.Arg(*s.MasterBookID)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Status != nil {
			vals[3] = psql.Arg(*s.Status)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.IsSeidokuKey != nil {
			vals[4] = psql.Arg(*s.IsSeidokuKey)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.RegisteredAt != nil {
			vals[5] = psql.Arg(*s.RegisteredAt)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[6] = psql.Arg(*s.CreatedAt)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserBookLogSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserBookLogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.UserUlid != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_ulid")...),
			psql.Arg(s.UserUlid),
		}})
	}

	if s.MasterBookID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "master_book_id")...),
			psql.Arg(s.MasterBookID),
		}})
	}

	if s.Status != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "status")...),
			psql.Arg(s.Status),
		}})
	}

	if s.IsSeidokuKey != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_seidoku_key")...),
			psql.Arg(s.IsSeidokuKey),
		}})
	}

	if s.RegisteredAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "registered_at")...),
			psql.Arg(s.RegisteredAt),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	return exprs
}

// FindUserBookLog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserBookLog(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*UserBookLog, error) {
	if len(cols) == 0 {
		return UserBookLogs.Query(
			SelectWhere.UserBookLogs.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return UserBookLogs.Query(
		SelectWhere.UserBookLogs.ID.EQ(IDPK),
		sm.Columns(UserBookLogs.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserBookLogExists checks the presence of a single record by primary key
func UserBookLogExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return UserBookLogs.Query(
		SelectWhere.UserBookLogs.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after UserBookLog is retrieved from the database
func (o *UserBookLog) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBookLogs.AfterSelectHooks.RunHooks(ctx, exec, UserBookLogSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = UserBookLogs.AfterInsertHooks.RunHooks(ctx, exec, UserBookLogSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = UserBookLogs.AfterUpdateHooks.RunHooks(ctx, exec, UserBookLogSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = UserBookLogs.AfterDeleteHooks.RunHooks(ctx, exec, UserBookLogSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the UserBookLog
func (o *UserBookLog) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *UserBookLog) pkEQ() dialect.Expression {
	return psql.Quote("user_book_logs", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the UserBookLog
func (o *UserBookLog) Update(ctx context.Context, exec bob.Executor, s *UserBookLogSetter) error {
	v, err := UserBookLogs.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single UserBookLog record with an executor
func (o *UserBookLog) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := UserBookLogs.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the UserBookLog using the executor
func (o *UserBookLog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserBookLogs.Query(
		SelectWhere.UserBookLogs.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserBookLogSlice is retrieved from the database
func (o UserBookLogSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = UserBookLogs.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = UserBookLogs.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = UserBookLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = UserBookLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserBookLogSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_book_logs", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserBookLogSlice) copyMatchingRows(from ...*UserBookLog) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserBookLogSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBookLogs.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBookLog:
				o.copyMatchingRows(retrieved)
			case []*UserBookLog:
				o.copyMatchingRows(retrieved...)
			case UserBookLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBookLog or a slice of UserBookLog
				// then run the AfterUpdateHooks on the slice
				_, err = UserBookLogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserBookLogSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return UserBookLogs.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *UserBookLog:
				o.copyMatchingRows(retrieved)
			case []*UserBookLog:
				o.copyMatchingRows(retrieved...)
			case UserBookLogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a UserBookLog or a slice of UserBookLog
				// then run the AfterDeleteHooks on the slice
				_, err = UserBookLogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserBookLogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserBookLogSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBookLogs.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserBookLogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := UserBookLogs.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserBookLogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := UserBookLogs.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userBookLogJoins[Q dialect.Joinable] struct {
	typ          string
	MasterBook   modAs[Q, masterBookColumns]
	UserUlidUser modAs[Q, userColumns]
}

func (j userBookLogJoins[Q]) aliasedAs(alias string) userBookLogJoins[Q] {
	return buildUserBookLogJoins[Q](buildUserBookLogColumns(alias), j.typ)
}

func buildUserBookLogJoins[Q dialect.Joinable](cols userBookLogColumns, typ string) userBookLogJoins[Q] {
	return userBookLogJoins[Q]{
		typ: typ,
		MasterBook: modAs[Q, masterBookColumns]{
			c: MasterBookColumns,
			f: func(to masterBookColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, MasterBooks.Name().As(to.Alias())).On(
						to.ID.EQ(cols.MasterBookID),
					))
				}

				return mods
			},
		},
		UserUlidUser: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.Ulid.EQ(cols.UserUlid),
					))
				}

				return mods
			},
		},
	}
}

// MasterBook starts a query for related objects on master_books
func (o *UserBookLog) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	return MasterBooks.Query(append(mods,
		sm.Where(MasterBookColumns.ID.EQ(psql.Arg(o.MasterBookID))),
	)...)
}

func (os UserBookLogSlice) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	pkMasterBookID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkMasterBookID[i] = o.MasterBookID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkMasterBookID), "bigint[]")),
	))

	return MasterBooks.Query(append(mods,
		sm.Where(psql.Group(MasterBookColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

// UserUlidUser starts a query for related objects on users
func (o *UserBookLog) UserUlidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.Ulid.EQ(psql.Arg(o.UserUlid))),
	)...)
}

func (os UserBookLogSlice) UserUlidUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkUserUlid[i] = o.UserUlid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserUlid), "text[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.Ulid).OP("IN", PKArgExpr)),
	)...)
}

func (o *UserBookLog) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "MasterBook":
		rel, ok := retrieved.(*MasterBook)
		if !ok {
			return fmt.Errorf("userBookLog cannot load %T as %q", retrieved, name)
		}

		o.R.MasterBook = rel

		if rel != nil {
			rel.R.UserBookLogs = UserBookLogSlice{o}
		}
		return nil
	case "UserUlidUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userBookLog cannot load %T as %q", retrieved, name)
		}

		o.R.UserUlidUser = rel

		if rel != nil {
			rel.R.UserUlidUserBookLogs = UserBookLogSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("userBookLog has no relationship %q", name)
	}
}

type userBookLogPreloader struct {
	MasterBook   func(...psql.PreloadOption) psql.Preloader
	UserUlidUser func(...psql.PreloadOption) psql.Preloader
}

func buildUserBookLogPreloader() userBookLogPreloader {
	return userBookLogPreloader{
		MasterBook: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*MasterBook, MasterBookSlice](orm.Relationship{
				Name: "MasterBook",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBookLogs,
						To:   TableNames.MasterBooks,
						FromColumns: []string{
							ColumnNames.UserBookLogs.MasterBookID,
						},
						ToColumns: []string{
							ColumnNames.MasterBooks.ID,
						},
					},
				},
			}, MasterBooks.Columns().Names(), opts...)
		},
		UserUlidUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "UserUlidUser",
				Sides: []orm.RelSide{
					{
						From: TableNames.UserBookLogs,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.UserBookLogs.UserUlid,
						},
						ToColumns: []string{
							ColumnNames.Users.Ulid,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type userBookLogThenLoader[Q orm.Loadable] struct {
	MasterBook   func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	UserUlidUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserBookLogThenLoader[Q orm.Loadable]() userBookLogThenLoader[Q] {
	type MasterBookLoadInterface interface {
		LoadMasterBook(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type UserUlidUserLoadInterface interface {
		LoadUserUlidUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userBookLogThenLoader[Q]{
		MasterBook: thenLoadBuilder[Q](
			"MasterBook",
			func(ctx context.Context, exec bob.Executor, retrieved MasterBookLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadMasterBook(ctx, exec, mods...)
			},
		),
		UserUlidUser: thenLoadBuilder[Q](
			"UserUlidUser",
			func(ctx context.Context, exec bob.Executor, retrieved UserUlidUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUserUlidUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadMasterBook loads the userBookLog's MasterBook into the .R struct
func (o *UserBookLog) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.MasterBook = nil

	related, err := o.MasterBook(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserBookLogs = UserBookLogSlice{o}

	o.R.MasterBook = related
	return nil
}

// LoadMasterBook loads the userBookLog's MasterBook into the .R struct
func (os UserBookLogSlice) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	masterBooks, err := os.MasterBook(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range masterBooks {
			if o.MasterBookID != rel.ID {
				continue
			}

			rel.R.UserBookLogs = append(rel.R.UserBookLogs, o)

			o.R.MasterBook = rel
			break
		}
	}

	return nil
}

// LoadUserUlidUser loads the userBookLog's UserUlidUser into the .R struct
func (o *UserBookLog) LoadUserUlidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.UserUlidUser = nil

	related, err := o.UserUlidUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.UserUlidUserBookLogs = UserBookLogSlice{o}

	o.R.UserUlidUser = related
	return nil
}

// LoadUserUlidUser loads the userBookLog's UserUlidUser into the .R struct
func (os UserBookLogSlice) LoadUserUlidUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.UserUlidUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserUlid != rel.Ulid {
				continue
			}

			rel.R.UserUlidUserBookLogs = append(rel.R.UserUlidUserBookLogs, o)

			o.R.UserUlidUser = rel
			break
		}
	}

	return nil
}

func attachUserBookLogMasterBook0(ctx context.Context, exec bob.Executor, count int, userBookLog0 *UserBookLog, masterBook1 *MasterBook) (*UserBookLog, error) {
	setter := &UserBookLogSetter{
		MasterBookID: &masterBook1.ID,
	}

	err := userBookLog0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBookLogMasterBook0: %w", err)
	}

	return userBookLog0, nil
}

func (userBookLog0 *UserBookLog) InsertMasterBook(ctx context.Context, exec bob.Executor, related *MasterBookSetter) error {
	masterBook1, err := MasterBooks.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBookLogMasterBook0(ctx, exec, 1, userBookLog0, masterBook1)
	if err != nil {
		return err
	}

	userBookLog0.R.MasterBook = masterBook1

	masterBook1.R.UserBookLogs = append(masterBook1.R.UserBookLogs, userBookLog0)

	return nil
}

func (userBookLog0 *UserBookLog) AttachMasterBook(ctx context.Context, exec bob.Executor, masterBook1 *MasterBook) error {
	var err error

	_, err = attachUserBookLogMasterBook0(ctx, exec, 1, userBookLog0, masterBook1)
	if err != nil {
		return err
	}

	userBookLog0.R.MasterBook = masterBook1

	masterBook1.R.UserBookLogs = append(masterBook1.R.UserBookLogs, userBookLog0)

	return nil
}

func attachUserBookLogUserUlidUser0(ctx context.Context, exec bob.Executor, count int, userBookLog0 *UserBookLog, user1 *User) (*UserBookLog, error) {
	setter := &UserBookLogSetter{
		UserUlid: &user1.Ulid,
	}

	err := userBookLog0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserBookLogUserUlidUser0: %w", err)
	}

	return userBookLog0, nil
}

func (userBookLog0 *UserBookLog) InsertUserUlidUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachUserBookLogUserUlidUser0(ctx, exec, 1, userBookLog0, user1)
	if err != nil {
		return err
	}

	userBookLog0.R.UserUlidUser = user1

	user1.R.UserUlidUserBookLogs = append(user1.R.UserUlidUserBookLogs, userBookLog0)

	return nil
}

func (userBookLog0 *UserBookLog) AttachUserUlidUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachUserBookLogUserUlidUser0(ctx, exec, 1, userBookLog0, user1)
	if err != nil {
		return err
	}

	userBookLog0.R.UserUlidUser = user1

	user1.R.UserUlidUserBookLogs = append(user1.R.UserUlidUserBookLogs, userBookLog0)

	return nil
}
