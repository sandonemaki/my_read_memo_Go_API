// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// OcrText is an object representing the database table.
type OcrText struct {
	ID             int64     `db:"id,pk" `
	RandokuImgUlid string    `db:"randoku_img_ulid" `
	Text           string    `db:"text" `
	CreatedAt      time.Time `db:"created_at" `
	UpdatedAt      time.Time `db:"updated_at" `

	R ocrTextR `db:"-" `
}

// OcrTextSlice is an alias for a slice of pointers to OcrText.
// This should almost always be used instead of []*OcrText.
type OcrTextSlice []*OcrText

// OcrTexts contains methods to work with the ocr_texts table
var OcrTexts = psql.NewTablex[*OcrText, OcrTextSlice, *OcrTextSetter]("", "ocr_texts")

// OcrTextsQuery is a query on the ocr_texts table
type OcrTextsQuery = *psql.ViewQuery[*OcrText, OcrTextSlice]

// ocrTextR is where relationships are stored.
type ocrTextR struct {
	RandokuImgUlidRandokuImage *RandokuImage // ocr_texts.ocr_texts_randoku_img_ulid_fkey
}

type ocrTextColumnNames struct {
	ID             string
	RandokuImgUlid string
	Text           string
	CreatedAt      string
	UpdatedAt      string
}

var OcrTextColumns = buildOcrTextColumns("ocr_texts")

type ocrTextColumns struct {
	tableAlias     string
	ID             psql.Expression
	RandokuImgUlid psql.Expression
	Text           psql.Expression
	CreatedAt      psql.Expression
	UpdatedAt      psql.Expression
}

func (c ocrTextColumns) Alias() string {
	return c.tableAlias
}

func (ocrTextColumns) AliasedAs(alias string) ocrTextColumns {
	return buildOcrTextColumns(alias)
}

func buildOcrTextColumns(alias string) ocrTextColumns {
	return ocrTextColumns{
		tableAlias:     alias,
		ID:             psql.Quote(alias, "id"),
		RandokuImgUlid: psql.Quote(alias, "randoku_img_ulid"),
		Text:           psql.Quote(alias, "text"),
		CreatedAt:      psql.Quote(alias, "created_at"),
		UpdatedAt:      psql.Quote(alias, "updated_at"),
	}
}

type ocrTextWhere[Q psql.Filterable] struct {
	ID             psql.WhereMod[Q, int64]
	RandokuImgUlid psql.WhereMod[Q, string]
	Text           psql.WhereMod[Q, string]
	CreatedAt      psql.WhereMod[Q, time.Time]
	UpdatedAt      psql.WhereMod[Q, time.Time]
}

func (ocrTextWhere[Q]) AliasedAs(alias string) ocrTextWhere[Q] {
	return buildOcrTextWhere[Q](buildOcrTextColumns(alias))
}

func buildOcrTextWhere[Q psql.Filterable](cols ocrTextColumns) ocrTextWhere[Q] {
	return ocrTextWhere[Q]{
		ID:             psql.Where[Q, int64](cols.ID),
		RandokuImgUlid: psql.Where[Q, string](cols.RandokuImgUlid),
		Text:           psql.Where[Q, string](cols.Text),
		CreatedAt:      psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:      psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var OcrTextErrors = &ocrTextErrors{
	ErrUniqueOcrTextsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "ocr_texts",
		columns: []string{"id"},
		s:       "ocr_texts_pkey",
	},

	ErrUniqueOcrTextsRandokuImgUlidKey: &UniqueConstraintError{
		schema:  "",
		table:   "ocr_texts",
		columns: []string{"randoku_img_ulid"},
		s:       "ocr_texts_randoku_img_ulid_key",
	},
}

type ocrTextErrors struct {
	ErrUniqueOcrTextsPkey *UniqueConstraintError

	ErrUniqueOcrTextsRandokuImgUlidKey *UniqueConstraintError
}

// OcrTextSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type OcrTextSetter struct {
	ID             *int64     `db:"id,pk" `
	RandokuImgUlid *string    `db:"randoku_img_ulid" `
	Text           *string    `db:"text" `
	CreatedAt      *time.Time `db:"created_at" `
	UpdatedAt      *time.Time `db:"updated_at" `
}

func (s OcrTextSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.RandokuImgUlid != nil {
		vals = append(vals, "randoku_img_ulid")
	}

	if s.Text != nil {
		vals = append(vals, "text")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s OcrTextSetter) Overwrite(t *OcrText) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.RandokuImgUlid != nil {
		t.RandokuImgUlid = *s.RandokuImgUlid
	}
	if s.Text != nil {
		t.Text = *s.Text
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *OcrTextSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return OcrTexts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.RandokuImgUlid != nil {
			vals[1] = psql.Arg(*s.RandokuImgUlid)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Text != nil {
			vals[2] = psql.Arg(*s.Text)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[3] = psql.Arg(*s.CreatedAt)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[4] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s OcrTextSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s OcrTextSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.RandokuImgUlid != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "randoku_img_ulid")...),
			psql.Arg(s.RandokuImgUlid),
		}})
	}

	if s.Text != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "text")...),
			psql.Arg(s.Text),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindOcrText retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindOcrText(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*OcrText, error) {
	if len(cols) == 0 {
		return OcrTexts.Query(
			SelectWhere.OcrTexts.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return OcrTexts.Query(
		SelectWhere.OcrTexts.ID.EQ(IDPK),
		sm.Columns(OcrTexts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// OcrTextExists checks the presence of a single record by primary key
func OcrTextExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return OcrTexts.Query(
		SelectWhere.OcrTexts.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after OcrText is retrieved from the database
func (o *OcrText) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = OcrTexts.AfterSelectHooks.RunHooks(ctx, exec, OcrTextSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = OcrTexts.AfterInsertHooks.RunHooks(ctx, exec, OcrTextSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = OcrTexts.AfterUpdateHooks.RunHooks(ctx, exec, OcrTextSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = OcrTexts.AfterDeleteHooks.RunHooks(ctx, exec, OcrTextSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the OcrText
func (o *OcrText) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *OcrText) pkEQ() dialect.Expression {
	return psql.Quote("ocr_texts", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the OcrText
func (o *OcrText) Update(ctx context.Context, exec bob.Executor, s *OcrTextSetter) error {
	v, err := OcrTexts.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single OcrText record with an executor
func (o *OcrText) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := OcrTexts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the OcrText using the executor
func (o *OcrText) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := OcrTexts.Query(
		SelectWhere.OcrTexts.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after OcrTextSlice is retrieved from the database
func (o OcrTextSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = OcrTexts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = OcrTexts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = OcrTexts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = OcrTexts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o OcrTextSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("ocr_texts", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o OcrTextSlice) copyMatchingRows(from ...*OcrText) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o OcrTextSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return OcrTexts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *OcrText:
				o.copyMatchingRows(retrieved)
			case []*OcrText:
				o.copyMatchingRows(retrieved...)
			case OcrTextSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a OcrText or a slice of OcrText
				// then run the AfterUpdateHooks on the slice
				_, err = OcrTexts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o OcrTextSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return OcrTexts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *OcrText:
				o.copyMatchingRows(retrieved)
			case []*OcrText:
				o.copyMatchingRows(retrieved...)
			case OcrTextSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a OcrText or a slice of OcrText
				// then run the AfterDeleteHooks on the slice
				_, err = OcrTexts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o OcrTextSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals OcrTextSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := OcrTexts.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o OcrTextSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := OcrTexts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o OcrTextSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := OcrTexts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type ocrTextJoins[Q dialect.Joinable] struct {
	typ                        string
	RandokuImgUlidRandokuImage modAs[Q, randokuImageColumns]
}

func (j ocrTextJoins[Q]) aliasedAs(alias string) ocrTextJoins[Q] {
	return buildOcrTextJoins[Q](buildOcrTextColumns(alias), j.typ)
}

func buildOcrTextJoins[Q dialect.Joinable](cols ocrTextColumns, typ string) ocrTextJoins[Q] {
	return ocrTextJoins[Q]{
		typ: typ,
		RandokuImgUlidRandokuImage: modAs[Q, randokuImageColumns]{
			c: RandokuImageColumns,
			f: func(to randokuImageColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RandokuImages.Name().As(to.Alias())).On(
						to.Ulid.EQ(cols.RandokuImgUlid),
					))
				}

				return mods
			},
		},
	}
}

// RandokuImgUlidRandokuImage starts a query for related objects on randoku_images
func (o *OcrText) RandokuImgUlidRandokuImage(mods ...bob.Mod[*dialect.SelectQuery]) RandokuImagesQuery {
	return RandokuImages.Query(append(mods,
		sm.Where(RandokuImageColumns.Ulid.EQ(psql.Arg(o.RandokuImgUlid))),
	)...)
}

func (os OcrTextSlice) RandokuImgUlidRandokuImage(mods ...bob.Mod[*dialect.SelectQuery]) RandokuImagesQuery {
	pkRandokuImgUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkRandokuImgUlid[i] = o.RandokuImgUlid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkRandokuImgUlid), "text[]")),
	))

	return RandokuImages.Query(append(mods,
		sm.Where(psql.Group(RandokuImageColumns.Ulid).OP("IN", PKArgExpr)),
	)...)
}

func (o *OcrText) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "RandokuImgUlidRandokuImage":
		rel, ok := retrieved.(*RandokuImage)
		if !ok {
			return fmt.Errorf("ocrText cannot load %T as %q", retrieved, name)
		}

		o.R.RandokuImgUlidRandokuImage = rel

		if rel != nil {
			rel.R.RandokuImgUlidOcrText = o
		}
		return nil
	default:
		return fmt.Errorf("ocrText has no relationship %q", name)
	}
}

type ocrTextPreloader struct {
	RandokuImgUlidRandokuImage func(...psql.PreloadOption) psql.Preloader
}

func buildOcrTextPreloader() ocrTextPreloader {
	return ocrTextPreloader{
		RandokuImgUlidRandokuImage: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*RandokuImage, RandokuImageSlice](orm.Relationship{
				Name: "RandokuImgUlidRandokuImage",
				Sides: []orm.RelSide{
					{
						From: TableNames.OcrTexts,
						To:   TableNames.RandokuImages,
						FromColumns: []string{
							ColumnNames.OcrTexts.RandokuImgUlid,
						},
						ToColumns: []string{
							ColumnNames.RandokuImages.Ulid,
						},
					},
				},
			}, RandokuImages.Columns().Names(), opts...)
		},
	}
}

type ocrTextThenLoader[Q orm.Loadable] struct {
	RandokuImgUlidRandokuImage func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildOcrTextThenLoader[Q orm.Loadable]() ocrTextThenLoader[Q] {
	type RandokuImgUlidRandokuImageLoadInterface interface {
		LoadRandokuImgUlidRandokuImage(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return ocrTextThenLoader[Q]{
		RandokuImgUlidRandokuImage: thenLoadBuilder[Q](
			"RandokuImgUlidRandokuImage",
			func(ctx context.Context, exec bob.Executor, retrieved RandokuImgUlidRandokuImageLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadRandokuImgUlidRandokuImage(ctx, exec, mods...)
			},
		),
	}
}

// LoadRandokuImgUlidRandokuImage loads the ocrText's RandokuImgUlidRandokuImage into the .R struct
func (o *OcrText) LoadRandokuImgUlidRandokuImage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RandokuImgUlidRandokuImage = nil

	related, err := o.RandokuImgUlidRandokuImage(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RandokuImgUlidOcrText = o

	o.R.RandokuImgUlidRandokuImage = related
	return nil
}

// LoadRandokuImgUlidRandokuImage loads the ocrText's RandokuImgUlidRandokuImage into the .R struct
func (os OcrTextSlice) LoadRandokuImgUlidRandokuImage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	randokuImages, err := os.RandokuImgUlidRandokuImage(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range randokuImages {
			if o.RandokuImgUlid != rel.Ulid {
				continue
			}

			rel.R.RandokuImgUlidOcrText = o

			o.R.RandokuImgUlidRandokuImage = rel
			break
		}
	}

	return nil
}

func attachOcrTextRandokuImgUlidRandokuImage0(ctx context.Context, exec bob.Executor, count int, ocrText0 *OcrText, randokuImage1 *RandokuImage) (*OcrText, error) {
	setter := &OcrTextSetter{
		RandokuImgUlid: &randokuImage1.Ulid,
	}

	err := ocrText0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachOcrTextRandokuImgUlidRandokuImage0: %w", err)
	}

	return ocrText0, nil
}

func (ocrText0 *OcrText) InsertRandokuImgUlidRandokuImage(ctx context.Context, exec bob.Executor, related *RandokuImageSetter) error {
	randokuImage1, err := RandokuImages.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachOcrTextRandokuImgUlidRandokuImage0(ctx, exec, 1, ocrText0, randokuImage1)
	if err != nil {
		return err
	}

	ocrText0.R.RandokuImgUlidRandokuImage = randokuImage1

	randokuImage1.R.RandokuImgUlidOcrText = ocrText0

	return nil
}

func (ocrText0 *OcrText) AttachRandokuImgUlidRandokuImage(ctx context.Context, exec bob.Executor, randokuImage1 *RandokuImage) error {
	var err error

	_, err = attachOcrTextRandokuImgUlidRandokuImage0(ctx, exec, 1, ocrText0, randokuImage1)
	if err != nil {
		return err
	}

	ocrText0.R.RandokuImgUlidRandokuImage = randokuImage1

	randokuImage1.R.RandokuImgUlidOcrText = ocrText0

	return nil
}
