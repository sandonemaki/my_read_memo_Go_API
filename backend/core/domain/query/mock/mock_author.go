// Code generated by MockGen. DO NOT EDIT.
// Source: author.go

// Package mock_query is a generated GoMock package.
package mock_query

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sandonemaki/my_read_memo_Go_API/backend/core/domain/model"
	query "github.com/sandonemaki/my_read_memo_Go_API/backend/core/domain/query"
)

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockAuthor) GetByID(ctx context.Context, query query.AuthorGetQuery, orFail bool) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, query, orFail)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAuthorMockRecorder) GetByID(ctx, query, orFail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAuthor)(nil).GetByID), ctx, query, orFail)
}

// List mocks base method.
func (m *MockAuthor) List(ctx context.Context) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuthorMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuthor)(nil).List), ctx)
}
