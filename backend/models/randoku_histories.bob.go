// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// RandokuHistory is an object representing the database table.
type RandokuHistory struct {
	ID        int64           `db:"id,pk" `
	Path      string          `db:"path" `
	BookID    null.Val[int64] `db:"book_id" `
	CreatedAt time.Time       `db:"created_at" `
	UpdatedAt time.Time       `db:"updated_at" `

	R randokuHistoryR `db:"-" `
}

// RandokuHistorySlice is an alias for a slice of pointers to RandokuHistory.
// This should almost always be used instead of []*RandokuHistory.
type RandokuHistorySlice []*RandokuHistory

// RandokuHistories contains methods to work with the randoku_histories table
var RandokuHistories = psql.NewTablex[*RandokuHistory, RandokuHistorySlice, *RandokuHistorySetter]("", "randoku_histories")

// RandokuHistoriesQuery is a query on the randoku_histories table
type RandokuHistoriesQuery = *psql.ViewQuery[*RandokuHistory, RandokuHistorySlice]

// randokuHistoryR is where relationships are stored.
type randokuHistoryR struct {
	Book *Book // randoku_histories.randoku_histories_book_id_fkey
}

type randokuHistoryColumnNames struct {
	ID        string
	Path      string
	BookID    string
	CreatedAt string
	UpdatedAt string
}

var RandokuHistoryColumns = buildRandokuHistoryColumns("randoku_histories")

type randokuHistoryColumns struct {
	tableAlias string
	ID         psql.Expression
	Path       psql.Expression
	BookID     psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c randokuHistoryColumns) Alias() string {
	return c.tableAlias
}

func (randokuHistoryColumns) AliasedAs(alias string) randokuHistoryColumns {
	return buildRandokuHistoryColumns(alias)
}

func buildRandokuHistoryColumns(alias string) randokuHistoryColumns {
	return randokuHistoryColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Path:       psql.Quote(alias, "path"),
		BookID:     psql.Quote(alias, "book_id"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type randokuHistoryWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int64]
	Path      psql.WhereMod[Q, string]
	BookID    psql.WhereNullMod[Q, int64]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (randokuHistoryWhere[Q]) AliasedAs(alias string) randokuHistoryWhere[Q] {
	return buildRandokuHistoryWhere[Q](buildRandokuHistoryColumns(alias))
}

func buildRandokuHistoryWhere[Q psql.Filterable](cols randokuHistoryColumns) randokuHistoryWhere[Q] {
	return randokuHistoryWhere[Q]{
		ID:        psql.Where[Q, int64](cols.ID),
		Path:      psql.Where[Q, string](cols.Path),
		BookID:    psql.WhereNull[Q, int64](cols.BookID),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var RandokuHistoryErrors = &randokuHistoryErrors{
	ErrUniqueRandokuHistoriesPkey: &UniqueConstraintError{s: "randoku_histories_pkey"},
}

type randokuHistoryErrors struct {
	ErrUniqueRandokuHistoriesPkey *UniqueConstraintError
}

// RandokuHistorySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RandokuHistorySetter struct {
	ID        omit.Val[int64]     `db:"id,pk" `
	Path      omit.Val[string]    `db:"path" `
	BookID    omitnull.Val[int64] `db:"book_id" `
	CreatedAt omit.Val[time.Time] `db:"created_at" `
	UpdatedAt omit.Val[time.Time] `db:"updated_at" `
}

func (s RandokuHistorySetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Path.IsUnset() {
		vals = append(vals, "path")
	}

	if !s.BookID.IsUnset() {
		vals = append(vals, "book_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s RandokuHistorySetter) Overwrite(t *RandokuHistory) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Path.IsUnset() {
		t.Path, _ = s.Path.Get()
	}
	if !s.BookID.IsUnset() {
		t.BookID, _ = s.BookID.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *RandokuHistorySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return RandokuHistories.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Path.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Path)
		}

		if s.BookID.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.BookID)
		}

		if s.CreatedAt.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RandokuHistorySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RandokuHistorySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Path.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "path")...),
			psql.Arg(s.Path),
		}})
	}

	if !s.BookID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "book_id")...),
			psql.Arg(s.BookID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindRandokuHistory retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRandokuHistory(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*RandokuHistory, error) {
	if len(cols) == 0 {
		return RandokuHistories.Query(
			SelectWhere.RandokuHistories.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return RandokuHistories.Query(
		SelectWhere.RandokuHistories.ID.EQ(IDPK),
		sm.Columns(RandokuHistories.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RandokuHistoryExists checks the presence of a single record by primary key
func RandokuHistoryExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return RandokuHistories.Query(
		SelectWhere.RandokuHistories.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after RandokuHistory is retrieved from the database
func (o *RandokuHistory) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RandokuHistories.AfterSelectHooks.RunHooks(ctx, exec, RandokuHistorySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = RandokuHistories.AfterInsertHooks.RunHooks(ctx, exec, RandokuHistorySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = RandokuHistories.AfterUpdateHooks.RunHooks(ctx, exec, RandokuHistorySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = RandokuHistories.AfterDeleteHooks.RunHooks(ctx, exec, RandokuHistorySlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the RandokuHistory
func (o *RandokuHistory) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *RandokuHistory) pkEQ() dialect.Expression {
	return psql.Quote("randoku_histories", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the RandokuHistory
func (o *RandokuHistory) Update(ctx context.Context, exec bob.Executor, s *RandokuHistorySetter) error {
	v, err := RandokuHistories.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single RandokuHistory record with an executor
func (o *RandokuHistory) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := RandokuHistories.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the RandokuHistory using the executor
func (o *RandokuHistory) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := RandokuHistories.Query(
		SelectWhere.RandokuHistories.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after RandokuHistorySlice is retrieved from the database
func (o RandokuHistorySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RandokuHistories.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = RandokuHistories.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = RandokuHistories.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = RandokuHistories.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RandokuHistorySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("randoku_histories", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RandokuHistorySlice) copyMatchingRows(from ...*RandokuHistory) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RandokuHistorySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RandokuHistories.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RandokuHistory:
				o.copyMatchingRows(retrieved)
			case []*RandokuHistory:
				o.copyMatchingRows(retrieved...)
			case RandokuHistorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RandokuHistory or a slice of RandokuHistory
				// then run the AfterUpdateHooks on the slice
				_, err = RandokuHistories.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RandokuHistorySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RandokuHistories.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RandokuHistory:
				o.copyMatchingRows(retrieved)
			case []*RandokuHistory:
				o.copyMatchingRows(retrieved...)
			case RandokuHistorySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RandokuHistory or a slice of RandokuHistory
				// then run the AfterDeleteHooks on the slice
				_, err = RandokuHistories.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RandokuHistorySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RandokuHistorySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RandokuHistories.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RandokuHistorySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RandokuHistories.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RandokuHistorySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := RandokuHistories.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type randokuHistoryJoins[Q dialect.Joinable] struct {
	typ  string
	Book func(context.Context) modAs[Q, bookColumns]
}

func (j randokuHistoryJoins[Q]) aliasedAs(alias string) randokuHistoryJoins[Q] {
	return buildRandokuHistoryJoins[Q](buildRandokuHistoryColumns(alias), j.typ)
}

func buildRandokuHistoryJoins[Q dialect.Joinable](cols randokuHistoryColumns, typ string) randokuHistoryJoins[Q] {
	return randokuHistoryJoins[Q]{
		typ:  typ,
		Book: randokuHistoriesJoinBook[Q](cols, typ),
	}
}

func randokuHistoriesJoinBook[Q dialect.Joinable](from randokuHistoryColumns, typ string) func(context.Context) modAs[Q, bookColumns] {
	return func(ctx context.Context) modAs[Q, bookColumns] {
		return modAs[Q, bookColumns]{
			c: BookColumns,
			f: func(to bookColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Books.Name().As(to.Alias())).On(
						to.ID.EQ(from.BookID),
					))
				}

				return mods
			},
		}
	}
}

// Book starts a query for related objects on books
func (o *RandokuHistory) Book(mods ...bob.Mod[*dialect.SelectQuery]) BooksQuery {
	return Books.Query(append(mods,
		sm.Where(BookColumns.ID.EQ(psql.Arg(o.BookID))),
	)...)
}

func (os RandokuHistorySlice) Book(mods ...bob.Mod[*dialect.SelectQuery]) BooksQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.BookID)
	}

	return Books.Query(append(mods,
		sm.Where(psql.Group(BookColumns.ID).In(PKArgs...)),
	)...)
}

func (o *RandokuHistory) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Book":
		rel, ok := retrieved.(*Book)
		if !ok {
			return fmt.Errorf("randokuHistory cannot load %T as %q", retrieved, name)
		}

		o.R.Book = rel

		if rel != nil {
			rel.R.RandokuHistories = RandokuHistorySlice{o}
		}
		return nil
	default:
		return fmt.Errorf("randokuHistory has no relationship %q", name)
	}
}

func PreloadRandokuHistoryBook(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Book, BookSlice](orm.Relationship{
		Name: "Book",
		Sides: []orm.RelSide{
			{
				From: TableNames.RandokuHistories,
				To:   TableNames.Books,
				FromColumns: []string{
					ColumnNames.RandokuHistories.BookID,
				},
				ToColumns: []string{
					ColumnNames.Books.ID,
				},
			},
		},
	}, Books.Columns().Names(), opts...)
}

func ThenLoadRandokuHistoryBook(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRandokuHistoryBook(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RandokuHistoryBook", retrieved)
		}

		err := loader.LoadRandokuHistoryBook(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRandokuHistoryBook loads the randokuHistory's Book into the .R struct
func (o *RandokuHistory) LoadRandokuHistoryBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Book = nil

	related, err := o.Book(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RandokuHistories = RandokuHistorySlice{o}

	o.R.Book = related
	return nil
}

// LoadRandokuHistoryBook loads the randokuHistory's Book into the .R struct
func (os RandokuHistorySlice) LoadRandokuHistoryBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	books, err := os.Book(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range books {
			if o.BookID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.RandokuHistories = append(rel.R.RandokuHistories, o)

			o.R.Book = rel
			break
		}
	}

	return nil
}

func attachRandokuHistoryBook0(ctx context.Context, exec bob.Executor, count int, randokuHistory0 *RandokuHistory, book1 *Book) (*RandokuHistory, error) {
	setter := &RandokuHistorySetter{
		BookID: omitnull.From(book1.ID),
	}

	err := randokuHistory0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRandokuHistoryBook0: %w", err)
	}

	return randokuHistory0, nil
}

func (randokuHistory0 *RandokuHistory) InsertBook(ctx context.Context, exec bob.Executor, related *BookSetter) error {
	book1, err := Books.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachRandokuHistoryBook0(ctx, exec, 1, randokuHistory0, book1)
	if err != nil {
		return err
	}

	randokuHistory0.R.Book = book1

	book1.R.RandokuHistories = append(book1.R.RandokuHistories, randokuHistory0)

	return nil
}

func (randokuHistory0 *RandokuHistory) AttachBook(ctx context.Context, exec bob.Executor, book1 *Book) error {
	var err error

	_, err = attachRandokuHistoryBook0(ctx, exec, 1, randokuHistory0, book1)
	if err != nil {
		return err
	}

	randokuHistory0.R.Book = book1

	book1.R.RandokuHistories = append(book1.R.RandokuHistories, randokuHistory0)

	return nil
}
