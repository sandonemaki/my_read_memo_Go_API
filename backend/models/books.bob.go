// Code generated by BobGen psql v0.34.2. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Book is an object representing the database table.
type Book struct {
	ID             int64            `db:"id,pk" `
	Title          string           `db:"title" `
	Author         string           `db:"author" `
	Publisher      null.Val[string] `db:"publisher" `
	TotalPage      int32            `db:"total_page" `
	ReadingState   int32            `db:"reading_state" `
	CreatedAt      time.Time        `db:"created_at" `
	UpdatedAt      time.Time        `db:"updated_at" `
	SeidokuMemoKey null.Val[bool]   `db:"seidoku_memo_key" `
	CoverPath      null.Val[string] `db:"cover_path" `
	UserID         int64            `db:"user_id" `

	R bookR `db:"-" `
}

// BookSlice is an alias for a slice of pointers to Book.
// This should almost always be used instead of []*Book.
type BookSlice []*Book

// Books contains methods to work with the books table
var Books = psql.NewTablex[*Book, BookSlice, *BookSetter]("", "books")

// BooksQuery is a query on the books table
type BooksQuery = *psql.ViewQuery[*Book, BookSlice]

// bookR is where relationships are stored.
type bookR struct {
	User             *User               // books.books_user_id_fkey
	RandokuHistories RandokuHistorySlice // randoku_histories.randoku_histories_book_id_fkey
	RandokuImgs      RandokuImgSlice     // randoku_imgs.randoku_imgs_book_id_fkey
	RandokuMemos     RandokuMemoSlice    // randoku_memos.randoku_memos_book_id_fkey
	SeidokuHistories SeidokuHistorySlice // seidoku_histories.seidoku_histories_book_id_fkey
	SeidokuMemos     SeidokuMemoSlice    // seidoku_memos.seidoku_memos_book_id_fkey
}

type bookColumnNames struct {
	ID             string
	Title          string
	Author         string
	Publisher      string
	TotalPage      string
	ReadingState   string
	CreatedAt      string
	UpdatedAt      string
	SeidokuMemoKey string
	CoverPath      string
	UserID         string
}

var BookColumns = buildBookColumns("books")

type bookColumns struct {
	tableAlias     string
	ID             psql.Expression
	Title          psql.Expression
	Author         psql.Expression
	Publisher      psql.Expression
	TotalPage      psql.Expression
	ReadingState   psql.Expression
	CreatedAt      psql.Expression
	UpdatedAt      psql.Expression
	SeidokuMemoKey psql.Expression
	CoverPath      psql.Expression
	UserID         psql.Expression
}

func (c bookColumns) Alias() string {
	return c.tableAlias
}

func (bookColumns) AliasedAs(alias string) bookColumns {
	return buildBookColumns(alias)
}

func buildBookColumns(alias string) bookColumns {
	return bookColumns{
		tableAlias:     alias,
		ID:             psql.Quote(alias, "id"),
		Title:          psql.Quote(alias, "title"),
		Author:         psql.Quote(alias, "author"),
		Publisher:      psql.Quote(alias, "publisher"),
		TotalPage:      psql.Quote(alias, "total_page"),
		ReadingState:   psql.Quote(alias, "reading_state"),
		CreatedAt:      psql.Quote(alias, "created_at"),
		UpdatedAt:      psql.Quote(alias, "updated_at"),
		SeidokuMemoKey: psql.Quote(alias, "seidoku_memo_key"),
		CoverPath:      psql.Quote(alias, "cover_path"),
		UserID:         psql.Quote(alias, "user_id"),
	}
}

type bookWhere[Q psql.Filterable] struct {
	ID             psql.WhereMod[Q, int64]
	Title          psql.WhereMod[Q, string]
	Author         psql.WhereMod[Q, string]
	Publisher      psql.WhereNullMod[Q, string]
	TotalPage      psql.WhereMod[Q, int32]
	ReadingState   psql.WhereMod[Q, int32]
	CreatedAt      psql.WhereMod[Q, time.Time]
	UpdatedAt      psql.WhereMod[Q, time.Time]
	SeidokuMemoKey psql.WhereNullMod[Q, bool]
	CoverPath      psql.WhereNullMod[Q, string]
	UserID         psql.WhereMod[Q, int64]
}

func (bookWhere[Q]) AliasedAs(alias string) bookWhere[Q] {
	return buildBookWhere[Q](buildBookColumns(alias))
}

func buildBookWhere[Q psql.Filterable](cols bookColumns) bookWhere[Q] {
	return bookWhere[Q]{
		ID:             psql.Where[Q, int64](cols.ID),
		Title:          psql.Where[Q, string](cols.Title),
		Author:         psql.Where[Q, string](cols.Author),
		Publisher:      psql.WhereNull[Q, string](cols.Publisher),
		TotalPage:      psql.Where[Q, int32](cols.TotalPage),
		ReadingState:   psql.Where[Q, int32](cols.ReadingState),
		CreatedAt:      psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:      psql.Where[Q, time.Time](cols.UpdatedAt),
		SeidokuMemoKey: psql.WhereNull[Q, bool](cols.SeidokuMemoKey),
		CoverPath:      psql.WhereNull[Q, string](cols.CoverPath),
		UserID:         psql.Where[Q, int64](cols.UserID),
	}
}

var BookErrors = &bookErrors{
	ErrUniqueBooksPkey: &UniqueConstraintError{s: "books_pkey"},
}

type bookErrors struct {
	ErrUniqueBooksPkey *UniqueConstraintError
}

// BookSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BookSetter struct {
	ID             omit.Val[int64]      `db:"id,pk" `
	Title          omit.Val[string]     `db:"title" `
	Author         omit.Val[string]     `db:"author" `
	Publisher      omitnull.Val[string] `db:"publisher" `
	TotalPage      omit.Val[int32]      `db:"total_page" `
	ReadingState   omit.Val[int32]      `db:"reading_state" `
	CreatedAt      omit.Val[time.Time]  `db:"created_at" `
	UpdatedAt      omit.Val[time.Time]  `db:"updated_at" `
	SeidokuMemoKey omitnull.Val[bool]   `db:"seidoku_memo_key" `
	CoverPath      omitnull.Val[string] `db:"cover_path" `
	UserID         omit.Val[int64]      `db:"user_id" `
}

func (s BookSetter) SetColumns() []string {
	vals := make([]string, 0, 11)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.Author.IsUnset() {
		vals = append(vals, "author")
	}

	if !s.Publisher.IsUnset() {
		vals = append(vals, "publisher")
	}

	if !s.TotalPage.IsUnset() {
		vals = append(vals, "total_page")
	}

	if !s.ReadingState.IsUnset() {
		vals = append(vals, "reading_state")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	if !s.SeidokuMemoKey.IsUnset() {
		vals = append(vals, "seidoku_memo_key")
	}

	if !s.CoverPath.IsUnset() {
		vals = append(vals, "cover_path")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	return vals
}

func (s BookSetter) Overwrite(t *Book) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.Author.IsUnset() {
		t.Author, _ = s.Author.Get()
	}
	if !s.Publisher.IsUnset() {
		t.Publisher, _ = s.Publisher.GetNull()
	}
	if !s.TotalPage.IsUnset() {
		t.TotalPage, _ = s.TotalPage.Get()
	}
	if !s.ReadingState.IsUnset() {
		t.ReadingState, _ = s.ReadingState.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
	if !s.SeidokuMemoKey.IsUnset() {
		t.SeidokuMemoKey, _ = s.SeidokuMemoKey.GetNull()
	}
	if !s.CoverPath.IsUnset() {
		t.CoverPath, _ = s.CoverPath.GetNull()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
}

func (s *BookSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Books.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 11)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Title.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Title)
		}

		if s.Author.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Author)
		}

		if s.Publisher.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Publisher)
		}

		if s.TotalPage.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.TotalPage)
		}

		if s.ReadingState.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.ReadingState)
		}

		if s.CreatedAt.IsUnset() {
			vals[6] = psql.Raw("DEFAULT")
		} else {
			vals[6] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[7] = psql.Raw("DEFAULT")
		} else {
			vals[7] = psql.Arg(s.UpdatedAt)
		}

		if s.SeidokuMemoKey.IsUnset() {
			vals[8] = psql.Raw("DEFAULT")
		} else {
			vals[8] = psql.Arg(s.SeidokuMemoKey)
		}

		if s.CoverPath.IsUnset() {
			vals[9] = psql.Raw("DEFAULT")
		} else {
			vals[9] = psql.Arg(s.CoverPath)
		}

		if s.UserID.IsUnset() {
			vals[10] = psql.Raw("DEFAULT")
		} else {
			vals[10] = psql.Arg(s.UserID)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s BookSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s BookSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 11)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "title")...),
			psql.Arg(s.Title),
		}})
	}

	if !s.Author.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "author")...),
			psql.Arg(s.Author),
		}})
	}

	if !s.Publisher.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "publisher")...),
			psql.Arg(s.Publisher),
		}})
	}

	if !s.TotalPage.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "total_page")...),
			psql.Arg(s.TotalPage),
		}})
	}

	if !s.ReadingState.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "reading_state")...),
			psql.Arg(s.ReadingState),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	if !s.SeidokuMemoKey.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "seidoku_memo_key")...),
			psql.Arg(s.SeidokuMemoKey),
		}})
	}

	if !s.CoverPath.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "cover_path")...),
			psql.Arg(s.CoverPath),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	return exprs
}

// FindBook retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBook(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Book, error) {
	if len(cols) == 0 {
		return Books.Query(
			SelectWhere.Books.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Books.Query(
		SelectWhere.Books.ID.EQ(IDPK),
		sm.Columns(Books.Columns().Only(cols...)),
	).One(ctx, exec)
}

// BookExists checks the presence of a single record by primary key
func BookExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Books.Query(
		SelectWhere.Books.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Book is retrieved from the database
func (o *Book) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Books.AfterSelectHooks.RunHooks(ctx, exec, BookSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Books.AfterInsertHooks.RunHooks(ctx, exec, BookSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Books.AfterUpdateHooks.RunHooks(ctx, exec, BookSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Books.AfterDeleteHooks.RunHooks(ctx, exec, BookSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Book
func (o *Book) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Book) pkEQ() dialect.Expression {
	return psql.Quote("books", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Book
func (o *Book) Update(ctx context.Context, exec bob.Executor, s *BookSetter) error {
	v, err := Books.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Book record with an executor
func (o *Book) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Books.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Book using the executor
func (o *Book) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Books.Query(
		SelectWhere.Books.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after BookSlice is retrieved from the database
func (o BookSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Books.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Books.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Books.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Books.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o BookSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("books", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o BookSlice) copyMatchingRows(from ...*Book) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o BookSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Books.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Book:
				o.copyMatchingRows(retrieved)
			case []*Book:
				o.copyMatchingRows(retrieved...)
			case BookSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Book or a slice of Book
				// then run the AfterUpdateHooks on the slice
				_, err = Books.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o BookSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Books.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Book:
				o.copyMatchingRows(retrieved)
			case []*Book:
				o.copyMatchingRows(retrieved...)
			case BookSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Book or a slice of Book
				// then run the AfterDeleteHooks on the slice
				_, err = Books.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o BookSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BookSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Books.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o BookSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Books.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o BookSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Books.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type bookJoins[Q dialect.Joinable] struct {
	typ              string
	User             func(context.Context) modAs[Q, userColumns]
	RandokuHistories func(context.Context) modAs[Q, randokuHistoryColumns]
	RandokuImgs      func(context.Context) modAs[Q, randokuImgColumns]
	RandokuMemos     func(context.Context) modAs[Q, randokuMemoColumns]
	SeidokuHistories func(context.Context) modAs[Q, seidokuHistoryColumns]
	SeidokuMemos     func(context.Context) modAs[Q, seidokuMemoColumns]
}

func (j bookJoins[Q]) aliasedAs(alias string) bookJoins[Q] {
	return buildBookJoins[Q](buildBookColumns(alias), j.typ)
}

func buildBookJoins[Q dialect.Joinable](cols bookColumns, typ string) bookJoins[Q] {
	return bookJoins[Q]{
		typ:              typ,
		User:             booksJoinUser[Q](cols, typ),
		RandokuHistories: booksJoinRandokuHistories[Q](cols, typ),
		RandokuImgs:      booksJoinRandokuImgs[Q](cols, typ),
		RandokuMemos:     booksJoinRandokuMemos[Q](cols, typ),
		SeidokuHistories: booksJoinSeidokuHistories[Q](cols, typ),
		SeidokuMemos:     booksJoinSeidokuMemos[Q](cols, typ),
	}
}

func booksJoinUser[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

func booksJoinRandokuHistories[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, randokuHistoryColumns] {
	return func(ctx context.Context) modAs[Q, randokuHistoryColumns] {
		return modAs[Q, randokuHistoryColumns]{
			c: RandokuHistoryColumns,
			f: func(to randokuHistoryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RandokuHistories.Name().As(to.Alias())).On(
						to.BookID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func booksJoinRandokuImgs[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, randokuImgColumns] {
	return func(ctx context.Context) modAs[Q, randokuImgColumns] {
		return modAs[Q, randokuImgColumns]{
			c: RandokuImgColumns,
			f: func(to randokuImgColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RandokuImgs.Name().As(to.Alias())).On(
						to.BookID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func booksJoinRandokuMemos[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, randokuMemoColumns] {
	return func(ctx context.Context) modAs[Q, randokuMemoColumns] {
		return modAs[Q, randokuMemoColumns]{
			c: RandokuMemoColumns,
			f: func(to randokuMemoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, RandokuMemos.Name().As(to.Alias())).On(
						to.BookID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func booksJoinSeidokuHistories[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, seidokuHistoryColumns] {
	return func(ctx context.Context) modAs[Q, seidokuHistoryColumns] {
		return modAs[Q, seidokuHistoryColumns]{
			c: SeidokuHistoryColumns,
			f: func(to seidokuHistoryColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, SeidokuHistories.Name().As(to.Alias())).On(
						to.BookID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func booksJoinSeidokuMemos[Q dialect.Joinable](from bookColumns, typ string) func(context.Context) modAs[Q, seidokuMemoColumns] {
	return func(ctx context.Context) modAs[Q, seidokuMemoColumns] {
		return modAs[Q, seidokuMemoColumns]{
			c: SeidokuMemoColumns,
			f: func(to seidokuMemoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, SeidokuMemos.Name().As(to.Alias())).On(
						to.BookID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Book) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os BookSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// RandokuHistories starts a query for related objects on randoku_histories
func (o *Book) RandokuHistories(mods ...bob.Mod[*dialect.SelectQuery]) RandokuHistoriesQuery {
	return RandokuHistories.Query(append(mods,
		sm.Where(RandokuHistoryColumns.BookID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os BookSlice) RandokuHistories(mods ...bob.Mod[*dialect.SelectQuery]) RandokuHistoriesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return RandokuHistories.Query(append(mods,
		sm.Where(psql.Group(RandokuHistoryColumns.BookID).In(PKArgs...)),
	)...)
}

// RandokuImgs starts a query for related objects on randoku_imgs
func (o *Book) RandokuImgs(mods ...bob.Mod[*dialect.SelectQuery]) RandokuImgsQuery {
	return RandokuImgs.Query(append(mods,
		sm.Where(RandokuImgColumns.BookID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os BookSlice) RandokuImgs(mods ...bob.Mod[*dialect.SelectQuery]) RandokuImgsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return RandokuImgs.Query(append(mods,
		sm.Where(psql.Group(RandokuImgColumns.BookID).In(PKArgs...)),
	)...)
}

// RandokuMemos starts a query for related objects on randoku_memos
func (o *Book) RandokuMemos(mods ...bob.Mod[*dialect.SelectQuery]) RandokuMemosQuery {
	return RandokuMemos.Query(append(mods,
		sm.Where(RandokuMemoColumns.BookID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os BookSlice) RandokuMemos(mods ...bob.Mod[*dialect.SelectQuery]) RandokuMemosQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return RandokuMemos.Query(append(mods,
		sm.Where(psql.Group(RandokuMemoColumns.BookID).In(PKArgs...)),
	)...)
}

// SeidokuHistories starts a query for related objects on seidoku_histories
func (o *Book) SeidokuHistories(mods ...bob.Mod[*dialect.SelectQuery]) SeidokuHistoriesQuery {
	return SeidokuHistories.Query(append(mods,
		sm.Where(SeidokuHistoryColumns.BookID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os BookSlice) SeidokuHistories(mods ...bob.Mod[*dialect.SelectQuery]) SeidokuHistoriesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return SeidokuHistories.Query(append(mods,
		sm.Where(psql.Group(SeidokuHistoryColumns.BookID).In(PKArgs...)),
	)...)
}

// SeidokuMemos starts a query for related objects on seidoku_memos
func (o *Book) SeidokuMemos(mods ...bob.Mod[*dialect.SelectQuery]) SeidokuMemosQuery {
	return SeidokuMemos.Query(append(mods,
		sm.Where(SeidokuMemoColumns.BookID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os BookSlice) SeidokuMemos(mods ...bob.Mod[*dialect.SelectQuery]) SeidokuMemosQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return SeidokuMemos.Query(append(mods,
		sm.Where(psql.Group(SeidokuMemoColumns.BookID).In(PKArgs...)),
	)...)
}

func (o *Book) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Books = BookSlice{o}
		}
		return nil
	case "RandokuHistories":
		rels, ok := retrieved.(RandokuHistorySlice)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.RandokuHistories = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Book = o
			}
		}
		return nil
	case "RandokuImgs":
		rels, ok := retrieved.(RandokuImgSlice)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.RandokuImgs = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Book = o
			}
		}
		return nil
	case "RandokuMemos":
		rels, ok := retrieved.(RandokuMemoSlice)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.RandokuMemos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Book = o
			}
		}
		return nil
	case "SeidokuHistories":
		rels, ok := retrieved.(SeidokuHistorySlice)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.SeidokuHistories = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Book = o
			}
		}
		return nil
	case "SeidokuMemos":
		rels, ok := retrieved.(SeidokuMemoSlice)
		if !ok {
			return fmt.Errorf("book cannot load %T as %q", retrieved, name)
		}

		o.R.SeidokuMemos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Book = o
			}
		}
		return nil
	default:
		return fmt.Errorf("book has no relationship %q", name)
	}
}

func PreloadBookUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Books,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Books.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadBookUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookUser", retrieved)
		}

		err := loader.LoadBookUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookUser loads the book's User into the .R struct
func (o *Book) LoadBookUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Books = BookSlice{o}

	o.R.User = related
	return nil
}

// LoadBookUser loads the book's User into the .R struct
func (os BookSlice) LoadBookUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Books = append(rel.R.Books, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func ThenLoadBookRandokuHistories(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookRandokuHistories(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookRandokuHistories", retrieved)
		}

		err := loader.LoadBookRandokuHistories(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookRandokuHistories loads the book's RandokuHistories into the .R struct
func (o *Book) LoadBookRandokuHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RandokuHistories = nil

	related, err := o.RandokuHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Book = o
	}

	o.R.RandokuHistories = related
	return nil
}

// LoadBookRandokuHistories loads the book's RandokuHistories into the .R struct
func (os BookSlice) LoadBookRandokuHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	randokuHistories, err := os.RandokuHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.RandokuHistories = nil
	}

	for _, o := range os {
		for _, rel := range randokuHistories {
			if o.ID != rel.BookID.GetOrZero() {
				continue
			}

			rel.R.Book = o

			o.R.RandokuHistories = append(o.R.RandokuHistories, rel)
		}
	}

	return nil
}

func ThenLoadBookRandokuImgs(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookRandokuImgs(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookRandokuImgs", retrieved)
		}

		err := loader.LoadBookRandokuImgs(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookRandokuImgs loads the book's RandokuImgs into the .R struct
func (o *Book) LoadBookRandokuImgs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RandokuImgs = nil

	related, err := o.RandokuImgs(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Book = o
	}

	o.R.RandokuImgs = related
	return nil
}

// LoadBookRandokuImgs loads the book's RandokuImgs into the .R struct
func (os BookSlice) LoadBookRandokuImgs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	randokuImgs, err := os.RandokuImgs(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.RandokuImgs = nil
	}

	for _, o := range os {
		for _, rel := range randokuImgs {
			if o.ID != rel.BookID.GetOrZero() {
				continue
			}

			rel.R.Book = o

			o.R.RandokuImgs = append(o.R.RandokuImgs, rel)
		}
	}

	return nil
}

func ThenLoadBookRandokuMemos(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookRandokuMemos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookRandokuMemos", retrieved)
		}

		err := loader.LoadBookRandokuMemos(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookRandokuMemos loads the book's RandokuMemos into the .R struct
func (o *Book) LoadBookRandokuMemos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RandokuMemos = nil

	related, err := o.RandokuMemos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Book = o
	}

	o.R.RandokuMemos = related
	return nil
}

// LoadBookRandokuMemos loads the book's RandokuMemos into the .R struct
func (os BookSlice) LoadBookRandokuMemos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	randokuMemos, err := os.RandokuMemos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.RandokuMemos = nil
	}

	for _, o := range os {
		for _, rel := range randokuMemos {
			if o.ID != rel.BookID.GetOrZero() {
				continue
			}

			rel.R.Book = o

			o.R.RandokuMemos = append(o.R.RandokuMemos, rel)
		}
	}

	return nil
}

func ThenLoadBookSeidokuHistories(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookSeidokuHistories(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookSeidokuHistories", retrieved)
		}

		err := loader.LoadBookSeidokuHistories(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookSeidokuHistories loads the book's SeidokuHistories into the .R struct
func (o *Book) LoadBookSeidokuHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.SeidokuHistories = nil

	related, err := o.SeidokuHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Book = o
	}

	o.R.SeidokuHistories = related
	return nil
}

// LoadBookSeidokuHistories loads the book's SeidokuHistories into the .R struct
func (os BookSlice) LoadBookSeidokuHistories(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	seidokuHistories, err := os.SeidokuHistories(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.SeidokuHistories = nil
	}

	for _, o := range os {
		for _, rel := range seidokuHistories {
			if o.ID != rel.BookID.GetOrZero() {
				continue
			}

			rel.R.Book = o

			o.R.SeidokuHistories = append(o.R.SeidokuHistories, rel)
		}
	}

	return nil
}

func ThenLoadBookSeidokuMemos(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBookSeidokuMemos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BookSeidokuMemos", retrieved)
		}

		err := loader.LoadBookSeidokuMemos(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBookSeidokuMemos loads the book's SeidokuMemos into the .R struct
func (o *Book) LoadBookSeidokuMemos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.SeidokuMemos = nil

	related, err := o.SeidokuMemos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Book = o
	}

	o.R.SeidokuMemos = related
	return nil
}

// LoadBookSeidokuMemos loads the book's SeidokuMemos into the .R struct
func (os BookSlice) LoadBookSeidokuMemos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	seidokuMemos, err := os.SeidokuMemos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.SeidokuMemos = nil
	}

	for _, o := range os {
		for _, rel := range seidokuMemos {
			if o.ID != rel.BookID.GetOrZero() {
				continue
			}

			rel.R.Book = o

			o.R.SeidokuMemos = append(o.R.SeidokuMemos, rel)
		}
	}

	return nil
}

func attachBookUser0(ctx context.Context, exec bob.Executor, count int, book0 *Book, user1 *User) (*Book, error) {
	setter := &BookSetter{
		UserID: omit.From(user1.ID),
	}

	err := book0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookUser0: %w", err)
	}

	return book0, nil
}

func (book0 *Book) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBookUser0(ctx, exec, 1, book0, user1)
	if err != nil {
		return err
	}

	book0.R.User = user1

	user1.R.Books = append(user1.R.Books, book0)

	return nil
}

func (book0 *Book) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachBookUser0(ctx, exec, 1, book0, user1)
	if err != nil {
		return err
	}

	book0.R.User = user1

	user1.R.Books = append(user1.R.Books, book0)

	return nil
}

func insertBookRandokuHistories0(ctx context.Context, exec bob.Executor, randokuHistories1 []*RandokuHistorySetter, book0 *Book) (RandokuHistorySlice, error) {
	for i := range randokuHistories1 {
		randokuHistories1[i].BookID = omitnull.From(book0.ID)
	}

	ret, err := RandokuHistories.Insert(bob.ToMods(randokuHistories1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookRandokuHistories0: %w", err)
	}

	return ret, nil
}

func attachBookRandokuHistories0(ctx context.Context, exec bob.Executor, count int, randokuHistories1 RandokuHistorySlice, book0 *Book) (RandokuHistorySlice, error) {
	setter := &RandokuHistorySetter{
		BookID: omitnull.From(book0.ID),
	}

	err := randokuHistories1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookRandokuHistories0: %w", err)
	}

	return randokuHistories1, nil
}

func (book0 *Book) InsertRandokuHistories(ctx context.Context, exec bob.Executor, related ...*RandokuHistorySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	randokuHistories1, err := insertBookRandokuHistories0(ctx, exec, related, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuHistories = append(book0.R.RandokuHistories, randokuHistories1...)

	for _, rel := range randokuHistories1 {
		rel.R.Book = book0
	}
	return nil
}

func (book0 *Book) AttachRandokuHistories(ctx context.Context, exec bob.Executor, related ...*RandokuHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	randokuHistories1 := RandokuHistorySlice(related)

	_, err = attachBookRandokuHistories0(ctx, exec, len(related), randokuHistories1, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuHistories = append(book0.R.RandokuHistories, randokuHistories1...)

	for _, rel := range related {
		rel.R.Book = book0
	}

	return nil
}

func insertBookRandokuImgs0(ctx context.Context, exec bob.Executor, randokuImgs1 []*RandokuImgSetter, book0 *Book) (RandokuImgSlice, error) {
	for i := range randokuImgs1 {
		randokuImgs1[i].BookID = omitnull.From(book0.ID)
	}

	ret, err := RandokuImgs.Insert(bob.ToMods(randokuImgs1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookRandokuImgs0: %w", err)
	}

	return ret, nil
}

func attachBookRandokuImgs0(ctx context.Context, exec bob.Executor, count int, randokuImgs1 RandokuImgSlice, book0 *Book) (RandokuImgSlice, error) {
	setter := &RandokuImgSetter{
		BookID: omitnull.From(book0.ID),
	}

	err := randokuImgs1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookRandokuImgs0: %w", err)
	}

	return randokuImgs1, nil
}

func (book0 *Book) InsertRandokuImgs(ctx context.Context, exec bob.Executor, related ...*RandokuImgSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	randokuImgs1, err := insertBookRandokuImgs0(ctx, exec, related, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuImgs = append(book0.R.RandokuImgs, randokuImgs1...)

	for _, rel := range randokuImgs1 {
		rel.R.Book = book0
	}
	return nil
}

func (book0 *Book) AttachRandokuImgs(ctx context.Context, exec bob.Executor, related ...*RandokuImg) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	randokuImgs1 := RandokuImgSlice(related)

	_, err = attachBookRandokuImgs0(ctx, exec, len(related), randokuImgs1, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuImgs = append(book0.R.RandokuImgs, randokuImgs1...)

	for _, rel := range related {
		rel.R.Book = book0
	}

	return nil
}

func insertBookRandokuMemos0(ctx context.Context, exec bob.Executor, randokuMemos1 []*RandokuMemoSetter, book0 *Book) (RandokuMemoSlice, error) {
	for i := range randokuMemos1 {
		randokuMemos1[i].BookID = omitnull.From(book0.ID)
	}

	ret, err := RandokuMemos.Insert(bob.ToMods(randokuMemos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookRandokuMemos0: %w", err)
	}

	return ret, nil
}

func attachBookRandokuMemos0(ctx context.Context, exec bob.Executor, count int, randokuMemos1 RandokuMemoSlice, book0 *Book) (RandokuMemoSlice, error) {
	setter := &RandokuMemoSetter{
		BookID: omitnull.From(book0.ID),
	}

	err := randokuMemos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookRandokuMemos0: %w", err)
	}

	return randokuMemos1, nil
}

func (book0 *Book) InsertRandokuMemos(ctx context.Context, exec bob.Executor, related ...*RandokuMemoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	randokuMemos1, err := insertBookRandokuMemos0(ctx, exec, related, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuMemos = append(book0.R.RandokuMemos, randokuMemos1...)

	for _, rel := range randokuMemos1 {
		rel.R.Book = book0
	}
	return nil
}

func (book0 *Book) AttachRandokuMemos(ctx context.Context, exec bob.Executor, related ...*RandokuMemo) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	randokuMemos1 := RandokuMemoSlice(related)

	_, err = attachBookRandokuMemos0(ctx, exec, len(related), randokuMemos1, book0)
	if err != nil {
		return err
	}

	book0.R.RandokuMemos = append(book0.R.RandokuMemos, randokuMemos1...)

	for _, rel := range related {
		rel.R.Book = book0
	}

	return nil
}

func insertBookSeidokuHistories0(ctx context.Context, exec bob.Executor, seidokuHistories1 []*SeidokuHistorySetter, book0 *Book) (SeidokuHistorySlice, error) {
	for i := range seidokuHistories1 {
		seidokuHistories1[i].BookID = omitnull.From(book0.ID)
	}

	ret, err := SeidokuHistories.Insert(bob.ToMods(seidokuHistories1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookSeidokuHistories0: %w", err)
	}

	return ret, nil
}

func attachBookSeidokuHistories0(ctx context.Context, exec bob.Executor, count int, seidokuHistories1 SeidokuHistorySlice, book0 *Book) (SeidokuHistorySlice, error) {
	setter := &SeidokuHistorySetter{
		BookID: omitnull.From(book0.ID),
	}

	err := seidokuHistories1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookSeidokuHistories0: %w", err)
	}

	return seidokuHistories1, nil
}

func (book0 *Book) InsertSeidokuHistories(ctx context.Context, exec bob.Executor, related ...*SeidokuHistorySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	seidokuHistories1, err := insertBookSeidokuHistories0(ctx, exec, related, book0)
	if err != nil {
		return err
	}

	book0.R.SeidokuHistories = append(book0.R.SeidokuHistories, seidokuHistories1...)

	for _, rel := range seidokuHistories1 {
		rel.R.Book = book0
	}
	return nil
}

func (book0 *Book) AttachSeidokuHistories(ctx context.Context, exec bob.Executor, related ...*SeidokuHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	seidokuHistories1 := SeidokuHistorySlice(related)

	_, err = attachBookSeidokuHistories0(ctx, exec, len(related), seidokuHistories1, book0)
	if err != nil {
		return err
	}

	book0.R.SeidokuHistories = append(book0.R.SeidokuHistories, seidokuHistories1...)

	for _, rel := range related {
		rel.R.Book = book0
	}

	return nil
}

func insertBookSeidokuMemos0(ctx context.Context, exec bob.Executor, seidokuMemos1 []*SeidokuMemoSetter, book0 *Book) (SeidokuMemoSlice, error) {
	for i := range seidokuMemos1 {
		seidokuMemos1[i].BookID = omitnull.From(book0.ID)
	}

	ret, err := SeidokuMemos.Insert(bob.ToMods(seidokuMemos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertBookSeidokuMemos0: %w", err)
	}

	return ret, nil
}

func attachBookSeidokuMemos0(ctx context.Context, exec bob.Executor, count int, seidokuMemos1 SeidokuMemoSlice, book0 *Book) (SeidokuMemoSlice, error) {
	setter := &SeidokuMemoSetter{
		BookID: omitnull.From(book0.ID),
	}

	err := seidokuMemos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachBookSeidokuMemos0: %w", err)
	}

	return seidokuMemos1, nil
}

func (book0 *Book) InsertSeidokuMemos(ctx context.Context, exec bob.Executor, related ...*SeidokuMemoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	seidokuMemos1, err := insertBookSeidokuMemos0(ctx, exec, related, book0)
	if err != nil {
		return err
	}

	book0.R.SeidokuMemos = append(book0.R.SeidokuMemos, seidokuMemos1...)

	for _, rel := range seidokuMemos1 {
		rel.R.Book = book0
	}
	return nil
}

func (book0 *Book) AttachSeidokuMemos(ctx context.Context, exec bob.Executor, related ...*SeidokuMemo) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	seidokuMemos1 := SeidokuMemoSlice(related)

	_, err = attachBookSeidokuMemos0(ctx, exec, len(related), seidokuMemos1, book0)
	if err != nil {
		return err
	}

	book0.R.SeidokuMemos = append(book0.R.SeidokuMemos, seidokuMemos1...)

	for _, rel := range related {
		rel.R.Book = book0
	}

	return nil
}
