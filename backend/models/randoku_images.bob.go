// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// RandokuImage is an object representing the database table.
type RandokuImage struct {
	Ulid           string    `db:"ulid,pk" `
	MasterBookID   int64     `db:"master_book_id" `
	IsBookmark     bool      `db:"is_bookmark" `
	S3URL          string    `db:"s3_url" `
	ThumbnailS3URL string    `db:"thumbnail_s3_url" `
	Name           string    `db:"name" `
	IsAlreadyRead  bool      `db:"is_already_read" `
	CreatedAt      time.Time `db:"created_at" `
	UpdatedAt      time.Time `db:"updated_at" `

	R randokuImageR `db:"-" `
}

// RandokuImageSlice is an alias for a slice of pointers to RandokuImage.
// This should almost always be used instead of []*RandokuImage.
type RandokuImageSlice []*RandokuImage

// RandokuImages contains methods to work with the randoku_images table
var RandokuImages = psql.NewTablex[*RandokuImage, RandokuImageSlice, *RandokuImageSetter]("", "randoku_images")

// RandokuImagesQuery is a query on the randoku_images table
type RandokuImagesQuery = *psql.ViewQuery[*RandokuImage, RandokuImageSlice]

// randokuImageR is where relationships are stored.
type randokuImageR struct {
	RandokuImgUlidOcrText *OcrText    // ocr_texts.ocr_texts_randoku_img_ulid_fkey
	MasterBook            *MasterBook // randoku_images.randoku_images_master_book_id_fkey
}

type randokuImageColumnNames struct {
	Ulid           string
	MasterBookID   string
	IsBookmark     string
	S3URL          string
	ThumbnailS3URL string
	Name           string
	IsAlreadyRead  string
	CreatedAt      string
	UpdatedAt      string
}

var RandokuImageColumns = buildRandokuImageColumns("randoku_images")

type randokuImageColumns struct {
	tableAlias     string
	Ulid           psql.Expression
	MasterBookID   psql.Expression
	IsBookmark     psql.Expression
	S3URL          psql.Expression
	ThumbnailS3URL psql.Expression
	Name           psql.Expression
	IsAlreadyRead  psql.Expression
	CreatedAt      psql.Expression
	UpdatedAt      psql.Expression
}

func (c randokuImageColumns) Alias() string {
	return c.tableAlias
}

func (randokuImageColumns) AliasedAs(alias string) randokuImageColumns {
	return buildRandokuImageColumns(alias)
}

func buildRandokuImageColumns(alias string) randokuImageColumns {
	return randokuImageColumns{
		tableAlias:     alias,
		Ulid:           psql.Quote(alias, "ulid"),
		MasterBookID:   psql.Quote(alias, "master_book_id"),
		IsBookmark:     psql.Quote(alias, "is_bookmark"),
		S3URL:          psql.Quote(alias, "s3_url"),
		ThumbnailS3URL: psql.Quote(alias, "thumbnail_s3_url"),
		Name:           psql.Quote(alias, "name"),
		IsAlreadyRead:  psql.Quote(alias, "is_already_read"),
		CreatedAt:      psql.Quote(alias, "created_at"),
		UpdatedAt:      psql.Quote(alias, "updated_at"),
	}
}

type randokuImageWhere[Q psql.Filterable] struct {
	Ulid           psql.WhereMod[Q, string]
	MasterBookID   psql.WhereMod[Q, int64]
	IsBookmark     psql.WhereMod[Q, bool]
	S3URL          psql.WhereMod[Q, string]
	ThumbnailS3URL psql.WhereMod[Q, string]
	Name           psql.WhereMod[Q, string]
	IsAlreadyRead  psql.WhereMod[Q, bool]
	CreatedAt      psql.WhereMod[Q, time.Time]
	UpdatedAt      psql.WhereMod[Q, time.Time]
}

func (randokuImageWhere[Q]) AliasedAs(alias string) randokuImageWhere[Q] {
	return buildRandokuImageWhere[Q](buildRandokuImageColumns(alias))
}

func buildRandokuImageWhere[Q psql.Filterable](cols randokuImageColumns) randokuImageWhere[Q] {
	return randokuImageWhere[Q]{
		Ulid:           psql.Where[Q, string](cols.Ulid),
		MasterBookID:   psql.Where[Q, int64](cols.MasterBookID),
		IsBookmark:     psql.Where[Q, bool](cols.IsBookmark),
		S3URL:          psql.Where[Q, string](cols.S3URL),
		ThumbnailS3URL: psql.Where[Q, string](cols.ThumbnailS3URL),
		Name:           psql.Where[Q, string](cols.Name),
		IsAlreadyRead:  psql.Where[Q, bool](cols.IsAlreadyRead),
		CreatedAt:      psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:      psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var RandokuImageErrors = &randokuImageErrors{
	ErrUniqueRandokuImagesPkey: &UniqueConstraintError{
		schema:  "",
		table:   "randoku_images",
		columns: []string{"ulid"},
		s:       "randoku_images_pkey",
	},
}

type randokuImageErrors struct {
	ErrUniqueRandokuImagesPkey *UniqueConstraintError
}

// RandokuImageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RandokuImageSetter struct {
	Ulid           *string    `db:"ulid,pk" `
	MasterBookID   *int64     `db:"master_book_id" `
	IsBookmark     *bool      `db:"is_bookmark" `
	S3URL          *string    `db:"s3_url" `
	ThumbnailS3URL *string    `db:"thumbnail_s3_url" `
	Name           *string    `db:"name" `
	IsAlreadyRead  *bool      `db:"is_already_read" `
	CreatedAt      *time.Time `db:"created_at" `
	UpdatedAt      *time.Time `db:"updated_at" `
}

func (s RandokuImageSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if s.Ulid != nil {
		vals = append(vals, "ulid")
	}

	if s.MasterBookID != nil {
		vals = append(vals, "master_book_id")
	}

	if s.IsBookmark != nil {
		vals = append(vals, "is_bookmark")
	}

	if s.S3URL != nil {
		vals = append(vals, "s3_url")
	}

	if s.ThumbnailS3URL != nil {
		vals = append(vals, "thumbnail_s3_url")
	}

	if s.Name != nil {
		vals = append(vals, "name")
	}

	if s.IsAlreadyRead != nil {
		vals = append(vals, "is_already_read")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s RandokuImageSetter) Overwrite(t *RandokuImage) {
	if s.Ulid != nil {
		t.Ulid = *s.Ulid
	}
	if s.MasterBookID != nil {
		t.MasterBookID = *s.MasterBookID
	}
	if s.IsBookmark != nil {
		t.IsBookmark = *s.IsBookmark
	}
	if s.S3URL != nil {
		t.S3URL = *s.S3URL
	}
	if s.ThumbnailS3URL != nil {
		t.ThumbnailS3URL = *s.ThumbnailS3URL
	}
	if s.Name != nil {
		t.Name = *s.Name
	}
	if s.IsAlreadyRead != nil {
		t.IsAlreadyRead = *s.IsAlreadyRead
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *RandokuImageSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return RandokuImages.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.Ulid != nil {
			vals[0] = psql.Arg(*s.Ulid)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.MasterBookID != nil {
			vals[1] = psql.Arg(*s.MasterBookID)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.IsBookmark != nil {
			vals[2] = psql.Arg(*s.IsBookmark)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.S3URL != nil {
			vals[3] = psql.Arg(*s.S3URL)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.ThumbnailS3URL != nil {
			vals[4] = psql.Arg(*s.ThumbnailS3URL)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Name != nil {
			vals[5] = psql.Arg(*s.Name)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.IsAlreadyRead != nil {
			vals[6] = psql.Arg(*s.IsAlreadyRead)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[7] = psql.Arg(*s.CreatedAt)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[8] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s RandokuImageSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s RandokuImageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if s.Ulid != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ulid")...),
			psql.Arg(s.Ulid),
		}})
	}

	if s.MasterBookID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "master_book_id")...),
			psql.Arg(s.MasterBookID),
		}})
	}

	if s.IsBookmark != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_bookmark")...),
			psql.Arg(s.IsBookmark),
		}})
	}

	if s.S3URL != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "s3_url")...),
			psql.Arg(s.S3URL),
		}})
	}

	if s.ThumbnailS3URL != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "thumbnail_s3_url")...),
			psql.Arg(s.ThumbnailS3URL),
		}})
	}

	if s.Name != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.IsAlreadyRead != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_already_read")...),
			psql.Arg(s.IsAlreadyRead),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindRandokuImage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRandokuImage(ctx context.Context, exec bob.Executor, UlidPK string, cols ...string) (*RandokuImage, error) {
	if len(cols) == 0 {
		return RandokuImages.Query(
			SelectWhere.RandokuImages.Ulid.EQ(UlidPK),
		).One(ctx, exec)
	}

	return RandokuImages.Query(
		SelectWhere.RandokuImages.Ulid.EQ(UlidPK),
		sm.Columns(RandokuImages.Columns().Only(cols...)),
	).One(ctx, exec)
}

// RandokuImageExists checks the presence of a single record by primary key
func RandokuImageExists(ctx context.Context, exec bob.Executor, UlidPK string) (bool, error) {
	return RandokuImages.Query(
		SelectWhere.RandokuImages.Ulid.EQ(UlidPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after RandokuImage is retrieved from the database
func (o *RandokuImage) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RandokuImages.AfterSelectHooks.RunHooks(ctx, exec, RandokuImageSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = RandokuImages.AfterInsertHooks.RunHooks(ctx, exec, RandokuImageSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = RandokuImages.AfterUpdateHooks.RunHooks(ctx, exec, RandokuImageSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = RandokuImages.AfterDeleteHooks.RunHooks(ctx, exec, RandokuImageSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the RandokuImage
func (o *RandokuImage) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Ulid)
}

func (o *RandokuImage) pkEQ() dialect.Expression {
	return psql.Quote("randoku_images", "ulid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the RandokuImage
func (o *RandokuImage) Update(ctx context.Context, exec bob.Executor, s *RandokuImageSetter) error {
	v, err := RandokuImages.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single RandokuImage record with an executor
func (o *RandokuImage) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := RandokuImages.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the RandokuImage using the executor
func (o *RandokuImage) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := RandokuImages.Query(
		SelectWhere.RandokuImages.Ulid.EQ(o.Ulid),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after RandokuImageSlice is retrieved from the database
func (o RandokuImageSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = RandokuImages.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = RandokuImages.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = RandokuImages.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = RandokuImages.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o RandokuImageSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("randoku_images", "ulid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o RandokuImageSlice) copyMatchingRows(from ...*RandokuImage) {
	for i, old := range o {
		for _, new := range from {
			if new.Ulid != old.Ulid {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o RandokuImageSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RandokuImages.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RandokuImage:
				o.copyMatchingRows(retrieved)
			case []*RandokuImage:
				o.copyMatchingRows(retrieved...)
			case RandokuImageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RandokuImage or a slice of RandokuImage
				// then run the AfterUpdateHooks on the slice
				_, err = RandokuImages.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o RandokuImageSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return RandokuImages.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *RandokuImage:
				o.copyMatchingRows(retrieved)
			case []*RandokuImage:
				o.copyMatchingRows(retrieved...)
			case RandokuImageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a RandokuImage or a slice of RandokuImage
				// then run the AfterDeleteHooks on the slice
				_, err = RandokuImages.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o RandokuImageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RandokuImageSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RandokuImages.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o RandokuImageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := RandokuImages.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o RandokuImageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := RandokuImages.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type randokuImageJoins[Q dialect.Joinable] struct {
	typ                   string
	RandokuImgUlidOcrText modAs[Q, ocrTextColumns]
	MasterBook            modAs[Q, masterBookColumns]
}

func (j randokuImageJoins[Q]) aliasedAs(alias string) randokuImageJoins[Q] {
	return buildRandokuImageJoins[Q](buildRandokuImageColumns(alias), j.typ)
}

func buildRandokuImageJoins[Q dialect.Joinable](cols randokuImageColumns, typ string) randokuImageJoins[Q] {
	return randokuImageJoins[Q]{
		typ: typ,
		RandokuImgUlidOcrText: modAs[Q, ocrTextColumns]{
			c: OcrTextColumns,
			f: func(to ocrTextColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, OcrTexts.Name().As(to.Alias())).On(
						to.RandokuImgUlid.EQ(cols.Ulid),
					))
				}

				return mods
			},
		},
		MasterBook: modAs[Q, masterBookColumns]{
			c: MasterBookColumns,
			f: func(to masterBookColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, MasterBooks.Name().As(to.Alias())).On(
						to.ID.EQ(cols.MasterBookID),
					))
				}

				return mods
			},
		},
	}
}

// RandokuImgUlidOcrText starts a query for related objects on ocr_texts
func (o *RandokuImage) RandokuImgUlidOcrText(mods ...bob.Mod[*dialect.SelectQuery]) OcrTextsQuery {
	return OcrTexts.Query(append(mods,
		sm.Where(OcrTextColumns.RandokuImgUlid.EQ(psql.Arg(o.Ulid))),
	)...)
}

func (os RandokuImageSlice) RandokuImgUlidOcrText(mods ...bob.Mod[*dialect.SelectQuery]) OcrTextsQuery {
	pkUlid := make(pgtypes.Array[string], len(os))
	for i, o := range os {
		pkUlid[i] = o.Ulid
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUlid), "text[]")),
	))

	return OcrTexts.Query(append(mods,
		sm.Where(psql.Group(OcrTextColumns.RandokuImgUlid).OP("IN", PKArgExpr)),
	)...)
}

// MasterBook starts a query for related objects on master_books
func (o *RandokuImage) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	return MasterBooks.Query(append(mods,
		sm.Where(MasterBookColumns.ID.EQ(psql.Arg(o.MasterBookID))),
	)...)
}

func (os RandokuImageSlice) MasterBook(mods ...bob.Mod[*dialect.SelectQuery]) MasterBooksQuery {
	pkMasterBookID := make(pgtypes.Array[int64], len(os))
	for i, o := range os {
		pkMasterBookID[i] = o.MasterBookID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkMasterBookID), "bigint[]")),
	))

	return MasterBooks.Query(append(mods,
		sm.Where(psql.Group(MasterBookColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *RandokuImage) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "RandokuImgUlidOcrText":
		rel, ok := retrieved.(*OcrText)
		if !ok {
			return fmt.Errorf("randokuImage cannot load %T as %q", retrieved, name)
		}

		o.R.RandokuImgUlidOcrText = rel

		if rel != nil {
			rel.R.RandokuImgUlidRandokuImage = o
		}
		return nil
	case "MasterBook":
		rel, ok := retrieved.(*MasterBook)
		if !ok {
			return fmt.Errorf("randokuImage cannot load %T as %q", retrieved, name)
		}

		o.R.MasterBook = rel

		if rel != nil {
			rel.R.RandokuImages = RandokuImageSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("randokuImage has no relationship %q", name)
	}
}

type randokuImagePreloader struct {
	RandokuImgUlidOcrText func(...psql.PreloadOption) psql.Preloader
	MasterBook            func(...psql.PreloadOption) psql.Preloader
}

func buildRandokuImagePreloader() randokuImagePreloader {
	return randokuImagePreloader{
		RandokuImgUlidOcrText: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*OcrText, OcrTextSlice](orm.Relationship{
				Name: "RandokuImgUlidOcrText",
				Sides: []orm.RelSide{
					{
						From: TableNames.RandokuImages,
						To:   TableNames.OcrTexts,
						FromColumns: []string{
							ColumnNames.RandokuImages.Ulid,
						},
						ToColumns: []string{
							ColumnNames.OcrTexts.RandokuImgUlid,
						},
					},
				},
			}, OcrTexts.Columns().Names(), opts...)
		},
		MasterBook: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*MasterBook, MasterBookSlice](orm.Relationship{
				Name: "MasterBook",
				Sides: []orm.RelSide{
					{
						From: TableNames.RandokuImages,
						To:   TableNames.MasterBooks,
						FromColumns: []string{
							ColumnNames.RandokuImages.MasterBookID,
						},
						ToColumns: []string{
							ColumnNames.MasterBooks.ID,
						},
					},
				},
			}, MasterBooks.Columns().Names(), opts...)
		},
	}
}

type randokuImageThenLoader[Q orm.Loadable] struct {
	RandokuImgUlidOcrText func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	MasterBook            func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildRandokuImageThenLoader[Q orm.Loadable]() randokuImageThenLoader[Q] {
	type RandokuImgUlidOcrTextLoadInterface interface {
		LoadRandokuImgUlidOcrText(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type MasterBookLoadInterface interface {
		LoadMasterBook(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return randokuImageThenLoader[Q]{
		RandokuImgUlidOcrText: thenLoadBuilder[Q](
			"RandokuImgUlidOcrText",
			func(ctx context.Context, exec bob.Executor, retrieved RandokuImgUlidOcrTextLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadRandokuImgUlidOcrText(ctx, exec, mods...)
			},
		),
		MasterBook: thenLoadBuilder[Q](
			"MasterBook",
			func(ctx context.Context, exec bob.Executor, retrieved MasterBookLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadMasterBook(ctx, exec, mods...)
			},
		),
	}
}

// LoadRandokuImgUlidOcrText loads the randokuImage's RandokuImgUlidOcrText into the .R struct
func (o *RandokuImage) LoadRandokuImgUlidOcrText(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.RandokuImgUlidOcrText = nil

	related, err := o.RandokuImgUlidOcrText(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RandokuImgUlidRandokuImage = o

	o.R.RandokuImgUlidOcrText = related
	return nil
}

// LoadRandokuImgUlidOcrText loads the randokuImage's RandokuImgUlidOcrText into the .R struct
func (os RandokuImageSlice) LoadRandokuImgUlidOcrText(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	ocrTexts, err := os.RandokuImgUlidOcrText(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range ocrTexts {
			if o.Ulid != rel.RandokuImgUlid {
				continue
			}

			rel.R.RandokuImgUlidRandokuImage = o

			o.R.RandokuImgUlidOcrText = rel
			break
		}
	}

	return nil
}

// LoadMasterBook loads the randokuImage's MasterBook into the .R struct
func (o *RandokuImage) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.MasterBook = nil

	related, err := o.MasterBook(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.RandokuImages = RandokuImageSlice{o}

	o.R.MasterBook = related
	return nil
}

// LoadMasterBook loads the randokuImage's MasterBook into the .R struct
func (os RandokuImageSlice) LoadMasterBook(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	masterBooks, err := os.MasterBook(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range masterBooks {
			if o.MasterBookID != rel.ID {
				continue
			}

			rel.R.RandokuImages = append(rel.R.RandokuImages, o)

			o.R.MasterBook = rel
			break
		}
	}

	return nil
}

func insertRandokuImageRandokuImgUlidOcrText0(ctx context.Context, exec bob.Executor, ocrText1 *OcrTextSetter, randokuImage0 *RandokuImage) (*OcrText, error) {
	ocrText1.RandokuImgUlid = &randokuImage0.Ulid

	ret, err := OcrTexts.Insert(ocrText1).One(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertRandokuImageRandokuImgUlidOcrText0: %w", err)
	}

	return ret, nil
}

func attachRandokuImageRandokuImgUlidOcrText0(ctx context.Context, exec bob.Executor, count int, ocrText1 *OcrText, randokuImage0 *RandokuImage) (*OcrText, error) {
	setter := &OcrTextSetter{
		RandokuImgUlid: &randokuImage0.Ulid,
	}

	err := ocrText1.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRandokuImageRandokuImgUlidOcrText0: %w", err)
	}

	return ocrText1, nil
}

func (randokuImage0 *RandokuImage) InsertRandokuImgUlidOcrText(ctx context.Context, exec bob.Executor, related *OcrTextSetter) error {
	ocrText1, err := insertRandokuImageRandokuImgUlidOcrText0(ctx, exec, related, randokuImage0)
	if err != nil {
		return err
	}

	randokuImage0.R.RandokuImgUlidOcrText = ocrText1

	ocrText1.R.RandokuImgUlidRandokuImage = randokuImage0

	return nil
}

func (randokuImage0 *RandokuImage) AttachRandokuImgUlidOcrText(ctx context.Context, exec bob.Executor, ocrText1 *OcrText) error {
	var err error

	_, err = attachRandokuImageRandokuImgUlidOcrText0(ctx, exec, 1, ocrText1, randokuImage0)
	if err != nil {
		return err
	}

	randokuImage0.R.RandokuImgUlidOcrText = ocrText1

	ocrText1.R.RandokuImgUlidRandokuImage = randokuImage0

	return nil
}

func attachRandokuImageMasterBook0(ctx context.Context, exec bob.Executor, count int, randokuImage0 *RandokuImage, masterBook1 *MasterBook) (*RandokuImage, error) {
	setter := &RandokuImageSetter{
		MasterBookID: &masterBook1.ID,
	}

	err := randokuImage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachRandokuImageMasterBook0: %w", err)
	}

	return randokuImage0, nil
}

func (randokuImage0 *RandokuImage) InsertMasterBook(ctx context.Context, exec bob.Executor, related *MasterBookSetter) error {
	masterBook1, err := MasterBooks.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachRandokuImageMasterBook0(ctx, exec, 1, randokuImage0, masterBook1)
	if err != nil {
		return err
	}

	randokuImage0.R.MasterBook = masterBook1

	masterBook1.R.RandokuImages = append(masterBook1.R.RandokuImages, randokuImage0)

	return nil
}

func (randokuImage0 *RandokuImage) AttachMasterBook(ctx context.Context, exec bob.Executor, masterBook1 *MasterBook) error {
	var err error

	_, err = attachRandokuImageMasterBook0(ctx, exec, 1, randokuImage0, masterBook1)
	if err != nil {
		return err
	}

	randokuImage0.R.MasterBook = masterBook1

	masterBook1.R.RandokuImages = append(masterBook1.R.RandokuImages, randokuImage0)

	return nil
}
